{"version":3,"sources":["index.js","from-markdown.js","to-markdown.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["exports.fromMarkdown = require('./from-markdown')\nexports.toMarkdown = require('./to-markdown')\n","module.exports = createFromMarkdown\n\nvar matters = require('micromark-extension-frontmatter/lib/matters')\n\nfunction createFromMarkdown(options) {\n  var settings = matters(options)\n  var length = settings.length\n  var index = -1\n  var enter = {}\n  var exit = {}\n  var matter\n\n  while (++index < length) {\n    matter = settings[index]\n    enter[matter.type] = opener(matter)\n    exit[matter.type] = close\n    exit[matter.type + 'Value'] = value\n  }\n\n  return {enter: enter, exit: exit}\n}\n\nfunction opener(matter) {\n  return open\n  function open(token) {\n    this.enter({type: matter.type, value: ''}, token)\n    this.buffer()\n  }\n}\n\nfunction close(token) {\n  var data = this.resume()\n  // Remove the initial and final eol.\n  this.exit(token).value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n}\n\nfunction value(token) {\n  this.config.enter.data.call(this, token)\n  this.config.exit.data.call(this, token)\n}\n","module.exports = createToMarkdown\n\nvar matters = require('micromark-extension-frontmatter/lib/matters')\n\nfunction createToMarkdown(options) {\n  var unsafe = []\n  var handlers = {}\n  var settings = matters(options)\n  var length = settings.length\n  var index = -1\n  var matter\n\n  while (++index < length) {\n    matter = settings[index]\n    handlers[matter.type] = handler(matter)\n    unsafe.push({atBreak: true, character: fence(matter, 'open').charAt(0)})\n  }\n\n  return {unsafe: unsafe, handlers: handlers}\n}\n\nfunction handler(matter) {\n  var open = fence(matter, 'open')\n  var close = fence(matter, 'close')\n\n  return handle\n\n  function handle(node) {\n    return open + (node.value ? '\\n' + node.value : '') + '\\n' + close\n  }\n}\n\nfunction fence(matter, prop) {\n  var marker\n\n  if (matter.marker) {\n    marker = pick(matter.marker, prop)\n    return marker + marker + marker\n  }\n\n  return pick(matter.fence, prop)\n}\n\nfunction pick(schema, prop) {\n  return typeof schema === 'string' ? schema : schema[prop]\n}\n"]}