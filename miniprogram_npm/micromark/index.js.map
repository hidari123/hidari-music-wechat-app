{"version":3,"sources":["index.js","buffer.js","dist/index.js","dist/compile/html.js","dist/constant/assign.js","dist/constant/has-own-property.js","dist/util/combine-html-extensions.js","dist/util/chunked-push.js","dist/util/chunked-splice.js","dist/constant/splice.js","dist/util/miniflat.js","dist/util/normalize-identifier.js","dist/util/normalize-uri.js","dist/character/ascii-alphanumeric.js","dist/util/regex-check.js","dist/constant/from-char-code.js","dist/util/safe-from-int.js","dist/parse.js","dist/initialize/content.js","dist/character/markdown-line-ending.js","dist/tokenize/factory-space.js","dist/character/markdown-space.js","dist/initialize/document.js","dist/tokenize/partial-blank-line.js","dist/initialize/flow.js","dist/tokenize/content.js","dist/util/prefix-size.js","dist/util/size-chunks.js","dist/util/subtokenize.js","dist/util/shallow.js","dist/initialize/text.js","dist/util/combine-extensions.js","dist/util/create-tokenizer.js","dist/util/resolve-all.js","dist/util/serialize-chunks.js","dist/util/slice-chunks.js","dist/constructs.js","dist/tokenize/attention.js","dist/util/classify-character.js","dist/character/markdown-line-ending-or-space.js","dist/character/unicode-punctuation.js","dist/constant/unicode-punctuation-regex.js","dist/character/unicode-whitespace.js","dist/util/move-point.js","dist/tokenize/autolink.js","dist/character/ascii-alpha.js","dist/character/ascii-atext.js","dist/character/ascii-control.js","dist/tokenize/block-quote.js","dist/tokenize/character-escape.js","dist/character/ascii-punctuation.js","dist/tokenize/character-reference.js","dist/character/ascii-digit.js","dist/character/ascii-hex-digit.js","dist/tokenize/code-fenced.js","dist/tokenize/code-indented.js","dist/tokenize/code-text.js","dist/tokenize/definition.js","dist/tokenize/factory-destination.js","dist/tokenize/factory-label.js","dist/tokenize/factory-whitespace.js","dist/tokenize/factory-title.js","dist/tokenize/hard-break-escape.js","dist/tokenize/heading-atx.js","dist/tokenize/html-flow.js","dist/constant/html-block-names.js","dist/constant/html-raw-names.js","dist/tokenize/html-text.js","dist/tokenize/label-end.js","dist/tokenize/label-start-image.js","dist/tokenize/label-start-link.js","dist/tokenize/line-ending.js","dist/tokenize/list.js","dist/tokenize/thematic-break.js","dist/tokenize/setext-underline.js","dist/postprocess.js","dist/preprocess.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA;AACA;AACA,ACHA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,AENA,AHSA,AIZA;AHUA,AENA,AHSA,AIZA;AHUA,AENA,AHSA,AIZA;AHUA,ADGA,AKfA,ADGA;AHUA,ADGA,AKfA,ADGA;AHUA,ADGA,AKfA,ADGA;AHUA,ADGA,AKfA,ACHA,AFMA;AHUA,ADGA,AKfA,ACHA,AFMA;AHUA,ADGA,AKfA,ACHA,AFMA;AHUA,AMlBA,APqBA,AKfA,ACHA,AFMA;AHUA,AMlBA,AFMA,ACHA,AFMA;AHUA,AMlBA,AFMA,ACHA,AFMA;AHUA,AMlBA,AFMA,ACHA,AFMA,AIZA;APsBA,AMlBA,AFMA,ACHA,AFMA,AIZA;APsBA,AMlBA,AFMA,ACHA,AFMA,AIZA;APsBA,AIZA,ACHA,AFMA,AIZA,ACHA;ARyBA,AIZA,ACHA,AFMA,AIZA,ACHA;ARyBA,AIZA,ACHA,AFMA,AIZA,ACHA;ARyBA,AKfA,AFMA,AIZA,ACHA,ACHA;AT4BA,AKfA,AFMA,AIZA,ACHA,ACHA;AT4BA,AKfA,AFMA,AIZA,ACHA,ACHA;ACFA,AV8BA,AKfA,AFMA,AIZA,ACHA,ACHA;ACFA,AV8BA,AKfA,AFMA,AIZA,ACHA,ACHA;ACFA,AV8BA,AKfA,AFMA,AIZA,ACHA,ACHA;ACFA,AV8BA,AKfA,AFMA,AKfA,ACHA,AENA;ADIA,AV8BA,AKfA,AFMA,AKfA,ACHA,AENA;ADIA,AV8BA,AKfA,AFMA,AKfA,ACHA,AENA;ADIA,AV8BA,AYpCA,APqBA,AFMA,AKfA,ACHA,AENA;ADIA,AV8BA,AYpCA,APqBA,AFMA,AKfA,ACHA,AENA;AXkCA,AYpCA,APqBA,AFMA,AKfA,ACHA,AENA;AXkCA,AYpCA,APqBA,AFMA,AKfA,ACHA,AENA,AENA;AbwCA,AYpCA,APqBA,AFMA,AKfA,ACHA,AENA,AENA;AbwCA,AYpCA,APqBA,AFMA,AKfA,ACHA,AENA,AENA;AbwCA,Ac1CA,AT2BA,AFMA,AKfA,ACHA,AENA,AENA;AbwCA,Ac1CA,AT2BA,AFMA,AMlBA,AENA,AENA;AbwCA,Ac1CA,AT2BA,AIZA,AENA,AENA;AbwCA,Ae7CA,ADGA,AT2BA,AIZA,AENA,AENA;AbwCA,Ae7CA,ADGA,AT2BA,AIZA,AENA,AENA;AbwCA,Ae7CA,ADGA,AT2BA,AIZA,AIZA;AGRA,AhBgDA,Ae7CA,ADGA,AT2BA,AIZA,AIZA;AGRA,AhBgDA,Ae7CA,ADGA,AT2BA,AIZA,AIZA;AGRA,AhBgDA,Ae7CA,ADGA,AT2BA,AIZA,AIZA;AGRA,AhBgDA,Ae7CA,ADGA,AGTA,AZoCA,AIZA,AIZA;AGRA,AhBgDA,Ae7CA,ADGA,AGTA,AZoCA,AIZA,AIZA;AGRA,AhBgDA,Ae7CA,ADGA,AGTA,AZoCA,AIZA,AIZA;AGRA,AENA,AlBsDA,Ae7CA,ADGA,AGTA,ARwBA,AIZA;AGRA,AENA,AlBsDA,Ae7CA,ADGA,AGTA,ARwBA,AIZA;AKdA,AlBsDA,Ae7CA,ADGA,AGTA,ARwBA,AIZA;AKdA,AlBsDA,Ae7CA,AIZA,ALeA,AGTA,ARwBA,AIZA;AKdA,AlBsDA,Ae7CA,AIZA,ALeA,AGTA,ARwBA,AIZA;AKdA,AlBsDA,Ae7CA,AIZA,ALeA,AGTA,ARwBA,AIZA;AKdA,AlBsDA,Ae7CA,AIZA,ALeA,AGTA,AGTA,AXiCA,AIZA;AKdA,AlBsDA,Ae7CA,AIZA,ALeA,AGTA,AGTA,AXiCA,AIZA;AbwCA,Ae7CA,AIZA,ALeA,AGTA,AGTA,AXiCA,AIZA;AbwCA,Ae7CA,AIZA,AENA,APqBA,AGTA,AGTA,AXiCA,AIZA;AbwCA,Ae7CA,AIZA,AENA,APqBA,AGTA,AGTA,AXiCA,AIZA;AbwCA,Ae7CA,AIZA,AENA,APqBA,AGTA,AGTA,AXiCA,AIZA;AbwCA,Ae7CA,AIZA,AENA,APqBA,AQxBA,ALeA,AGTA,AXiCA;AT4BA,Ae7CA,AIZA,AENA,APqBA,AQxBA,ALeA,AGTA,AXiCA;AT4BA,Ae7CA,AIZA,AENA,APqBA,AQxBA,ALeA,AGTA,AXiCA;AT4BA,Ae7CA,AIZA,AENA,APqBA,AQxBA,ALeA,AGTA,AXiCA,Ac1CA;AvBsEA,Ae7CA,AIZA,AENA,APqBA,AQxBA,ALeA,AGTA,AXiCA,Ac1CA;AvBsEA,Ae7CA,AIZA,AENA,APqBA,AQxBA,ALeA,AGTA,AXiCA,Ac1CA;AvBsEA,Ae7CA,AIZA,AENA,APqBA,AQxBA,ALeA,AGTA,AXiCA,Ac1CA,ACHA;AxByEA,Ae7CA,AIZA,AENA,APqBA,AQxBA,ALeA,AGTA,AXiCA,Ac1CA,ACHA;AxByEA,Ae7CA,AIZA,AENA,APqBA,AQxBA,ALeA,AGTA,AXiCA,Ac1CA,ACHA;AxByEA,Ae7CA,AIZA,AENA,APqBA,AQxBA,ALeA,AGTA,AXiCA,Ac1CA,ACHA,ACHA;AzB4EA,Ae7CA,AIZA,AENA,APqBA,AQxBA,ALeA,AGTA,AXiCA,Ac1CA,ACHA,ACHA;AzB4EA,Ae7CA,AIZA,AENA,APqBA,AQxBA,ALeA,AGTA,AXiCA,Ac1CA,ACHA,ACHA;AzB4EA,Ae7CA,AIZA,AENA,APqBA,AQxBA,ALeA,AGTA,AXiCA,Ac1CA,AGTA,AFMA,ACHA;AzB4EA,Ae7CA,AIZA,AENA,ACHA,ALeA,AGTA,AXiCA,Ac1CA,AGTA,AFMA,ACHA;AzB4EA,Ae7CA,AIZA,AENA,ACHA,ALeA,ARwBA,Ac1CA,AGTA,AFMA,ACHA;AzB4EA,Ae7CA,AIZA,AENA,AMlBA,ALeA,ALeA,ARwBA,AiBnDA,AFMA,ACHA;AzB4EA,Ae7CA,AIZA,AENA,AMlBA,ALeA,AbuCA,AiBnDA,AFMA,ACHA;AzB4EA,Ae7CA,AIZA,AENA,AMlBA,ALeA,AbuCA,AiBnDA,AFMA,ACHA;AzB4EA,Ae7CA,AIZA,AENA,AMlBA,ALeA,AMlBA,AnByDA,AiBnDA,AFMA,ACHA;AzB4EA,Ae7CA,AIZA,AENA,AMlBA,ALeA,AMlBA,AnByDA,AiBnDA,AFMA,ACHA;AzB4EA,Ae7CA,AIZA,AENA,AMlBA,ALeA,AMlBA,AnByDA,AiBnDA,AFMA,ACHA;AzB4EA,Ae7CA,AIZA,AENA,AMlBA,ALeA,AMlBA,ACHA,ApB4DA,AiBnDA,AFMA,ACHA;AzB4EA,Ae7CA,AIZA,AENA,AMlBA,ALeA,AMlBA,ACHA,ApB4DA,Ae7CA,ACHA;AzB4EA,Ae7CA,AIZA,AENA,AMlBA,ALeA,AMlBA,ACHA,ApB4DA,AgBhDA;AzB4EA,Ae7CA,AIZA,AENA,AMlBA,ALeA,AMlBA,ACHA,ACHA,ALeA;AzB4EA,Ae7CA,AIZA,AENA,AMlBA,ALeA,AMlBA,ACHA,ACHA,ALeA;AzB4EA,Ae7CA,AIZA,AENA,AMlBA,ALeA,AMlBA,ACHA,ACHA,ALeA;AzB4EA,Ae7CA,AIZA,AENA,AMlBA,ALeA,AMlBA,ACHA,ACHA,ACHA,ANkBA;AzB4EA,Ae7CA,AIZA,AENA,AMlBA,ALeA,AMlBA,ACHA,ACHA,ACHA,ANkBA;AzB4EA,Ae7CA,AIZA,AENA,AMlBA,ALeA,AMlBA,ACHA,ACHA,ACHA,ANkBA;AzB4EA,Ae7CA,AIZA,AENA,AMlBA,ALeA,AMlBA,ACHA,ACHA,ACHA,ACHA,APqBA;AzB4EA,Ae7CA,AIZA,AENA,AMlBA,ALeA,AMlBA,ACHA,ACHA,ACHA,ACHA,APqBA;AzB4EA,Ae7CA,AIZA,AENA,AMlBA,ALeA,AMlBA,ACHA,ACHA,ACHA,ACHA,APqBA;AzB4EA,AiCnGA,AlBsDA,AIZA,AENA,AMlBA,ALeA,AMlBA,ACHA,ACHA,ACHA,ACHA,APqBA;AzB4EA,AiCnGA,AlBsDA,AIZA,AENA,AMlBA,ALeA,AMlBA,ACHA,ACHA,ACHA,ACHA,APqBA;AzB4EA,AiCnGA,AlBsDA,AIZA,AENA,AMlBA,ALeA,AMlBA,ACHA,ACHA,ACHA,ACHA,APqBA;AzB4EA,AiCnGA,AlBsDA,AIZA,AENA,AMlBA,AOrBA,AZoCA,AMlBA,ACHA,ACHA,ACHA,ACHA,APqBA;AzB4EA,AiCnGA,AlBsDA,AIZA,AENA,AMlBA,AOrBA,AZoCA,AMlBA,ACHA,ACHA,ACHA,ACHA,APqBA;AzB4EA,AiCnGA,AlBsDA,AIZA,AENA,AMlBA,AOrBA,AZoCA,AMlBA,ACHA,ACHA,ACHA,ACHA,APqBA;AzB4EA,AiCnGA,AlBsDA,AIZA,AENA,AMlBA,AOrBA,AZoCA,AavCA,APqBA,ACHA,ACHA,ACHA,ACHA,APqBA;AzB4EA,AiCnGA,AlBsDA,AIZA,AENA,AMlBA,AOrBA,AZoCA,AavCA,APqBA,ACHA,ACHA,ACHA,ACHA,APqBA;AzB4EA,AiCnGA,AlBsDA,AIZA,AENA,AMlBA,AOrBA,AZoCA,AavCA,APqBA,ACHA,ACHA,ACHA,ACHA,APqBA;AWhCA,ApC4GA,AiCnGA,AlBsDA,AIZA,AENA,AMlBA,AOrBA,AZoCA,AavCA,APqBA,ACHA,ACHA,ACHA,ACHA,APqBA;AWhCA,ApC4GA,AiCnGA,AlBsDA,AIZA,AENA,AMlBA,AOrBA,AZoCA,AavCA,APqBA,ACHA,ACHA,ACHA,ACHA,APqBA;AWhCA,ApC4GA,AiCnGA,AlBsDA,AIZA,AENA,AMlBA,AOrBA,AZoCA,AavCA,APqBA,ACHA,ACHA,ACHA,ACHA,APqBA;AWhCA,ACHA,ArC+GA,AiCnGA,AlBsDA,AIZA,AENA,AMlBA,AOrBA,AZoCA,AavCA,APqBA,ACHA,AENA,ACHA,APqBA;AWhCA,ACHA,ArC+GA,AiCnGA,AlBsDA,AIZA,AENA,AMlBA,AOrBA,AZoCA,AavCA,APqBA,ACHA,AENA,ACHA,APqBA;AWhCA,ACHA,ArC+GA,AiCnGA,AlBsDA,AIZA,AENA,AMlBA,AOrBA,AZoCA,AavCA,APqBA,ACHA,AENA,ACHA,APqBA;AWhCA,ACHA,ArC+GA,AsClHA,ALeA,AlBsDA,AIZA,AENA,AMlBA,AOrBA,AZoCA,AavCA,APqBA,ACHA,AENA,ACHA,APqBA;AWhCA,ACHA,ArC+GA,AsClHA,ALeA,Ad0CA,AENA,AMlBA,AOrBA,AZoCA,AavCA,APqBA,ACHA,AENA,ACHA,APqBA;AYnCA,ArC+GA,AsClHA,ALeA,Ad0CA,AENA,AMlBA,AOrBA,AZoCA,AavCA,APqBA,ACHA,AENA,ACHA,APqBA;AYnCA,AENA,AvCqHA,AsClHA,ALeA,Ad0CA,AENA,AMlBA,AOrBA,AZoCA,AavCA,APqBA,ACHA,AENA,ACHA,APqBA;AYnCA,AENA,AvCqHA,AsClHA,ALeA,Ad0CA,AENA,AMlBA,AOrBA,AZoCA,AavCA,APqBA,ACHA,AENA,ACHA,APqBA;AYnCA,AENA,AvCqHA,AsClHA,ALeA,Ad0CA,AENA,AMlBA,AOrBA,AZoCA,AavCA,APqBA,ACHA,AENA,ACHA,APqBA;AYnCA,AENA,AvCqHA,AsClHA,ALeA,Ad0CA,AENA,AMlBA,AOrBA,AZoCA,AavCA,APqBA,ACHA,AWjCA,AT2BA,ACHA,APqBA;AYnCA,AENA,AvCqHA,AsClHA,ALeA,Ad0CA,AENA,AMlBA,AOrBA,AZoCA,AavCA,APqBA,ACHA,AWjCA,AT2BA,ACHA,APqBA;AczCA,AvCqHA,AsClHA,ALeA,Ad0CA,AENA,AMlBA,AOrBA,AZoCA,AavCA,APqBA,ACHA,AWjCA,AT2BA,ACHA,APqBA;AczCA,AvCqHA,AsClHA,ALeA,Ad0CA,AENA,AMlBA,AOrBA,AOrBA,AnByDA,AavCA,APqBA,ACHA,AWjCA,AT2BA,ACHA,APqBA;AczCA,AvCqHA,AsClHA,ALeA,Ad0CA,AQxBA,AOrBA,AOrBA,AnByDA,AavCA,APqBA,ACHA,AWjCA,AT2BA,ANkBA;AzB4EA,AsClHA,ALeA,Ad0CA,AQxBA,AOrBA,AOrBA,AnByDA,AavCA,APqBA,ACHA,AWjCA,AT2BA,ANkBA;AiBlDA,A1C8HA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AnByDA,AavCA,APqBA,ACHA,AWjCA,AT2BA,ANkBA;AiBlDA,A1C8HA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AnByDA,AavCA,APqBA,ACHA,AWjCA,AT2BA,ANkBA;AiBlDA,A1C8HA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AnByDA,AavCA,APqBA,ACHA,AWjCA,AT2BA,ANkBA;AiBlDA,ACHA,A3CiIA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AnByDA,AavCA,APqBA,ACHA,AWjCA,AT2BA,ANkBA;AiBlDA,ACHA,A3CiIA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AnByDA,AavCA,APqBA,ACHA,AWjCA,AT2BA,ANkBA;AiBlDA,ACHA,A3CiIA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AnByDA,AMlBA,ACHA,AWjCA,AT2BA,ANkBA;AiBlDA,ACHA,ACHA,A5CoIA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AnByDA,AMlBA,ACHA,AWjCA,AT2BA,ANkBA;AiBlDA,ACHA,ACHA,A5CoIA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AnByDA,AMlBA,ACHA,AENA,ANkBA;AkBrDA,ACHA,A5CoIA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AnByDA,AOrBA,AJYA;AkBrDA,ACHA,A5CoIA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AvBqEA,AOrBA,AJYA;AkBrDA,ACHA,A5CoIA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AvBqEA,AOrBA,AJYA;AmBxDA,A5CoIA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AvBqEA,AOrBA,AJYA;AmBxDA,A5CoIA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AxBwEA,AOrBA,AJYA;AmBxDA,A5CoIA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AxBwEA,AOrBA,AJYA;AmBxDA,A5CoIA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AxBwEA,AOrBA,AJYA;AmBxDA,AGTA,A/C6IA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AxBwEA,AOrBA,AJYA;AmBxDA,AGTA,A/C6IA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AxBwEA,AOrBA,AJYA;AmBxDA,AGTA,A/C6IA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AxBwEA,AOrBA,AJYA;AmBxDA,AGTA,A/C6IA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,A1B8EA,AOrBA,AJYA;AsBjEA,A/C6IA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,A1B8EA,AOrBA,AJYA;AsBjEA,A/C6IA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,A1B8EA,AOrBA,AJYA;AwBvEA,AFMA,A/C6IA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,A1B8EA,AOrBA,AJYA;AwBvEA,AFMA,A/C6IA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,A1B8EA,AOrBA,AJYA;AwBvEA,AjDmJA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,A1B8EA,AOrBA,AJYA;AwBvEA,ACHA,AlDsJA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,A1B8EA,AOrBA,AJYA;AwBvEA,ACHA,AlDsJA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,A1B8EA,AOrBA,AJYA;AwBvEA,ACHA,AlDsJA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,A1B8EA,AOrBA,AJYA;AwBvEA,ACHA,AlDsJA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,AGTA,A7BuFA,AOrBA,AJYA;AwBvEA,ACHA,AlDsJA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,AGTA,A7BuFA,AOrBA,AJYA;AyB1EA,AlDsJA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,AGTA,A7BuFA,AOrBA,AJYA;AyB1EA,AlDsJA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,AGTA,ACHA,A9B0FA,AOrBA,AJYA;AyB1EA,AlDsJA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,AGTA,ACHA,A9B0FA,AOrBA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,AGTA,ACHA,A9B0FA,AOrBA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,AGTA,ACHA,ACHA,A/B6FA,AOrBA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,AGTA,ACHA,ACHA,A/B6FA,AOrBA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,AGTA,ACHA,ACHA,A/B6FA,AOrBA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,AGTA,ACHA,ACHA,A/B6FA,AgChGA,AzB2EA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,AGTA,ACHA,ACHA,A/B6FA,AgChGA,AzB2EA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,AGTA,ACHA,ACHA,A/B6FA,AgChGA,AzB2EA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,AGTA,ACHA,ACHA,A/B6FA,AgChGA,ACHA,A1B8EA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,AGTA,ACHA,ACHA,ACHA,ACHA,A1B8EA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,AGTA,ACHA,ACHA,ACHA,ACHA,A1B8EA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,A3BiFA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,A3BiFA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,A3BiFA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,A5BoFA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,ACHA,AENA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,A5BoFA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,A5BoFA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,A5BoFA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,A5BoFA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,A5BoFA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,A9B0FA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,A9B0FA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,A9B0FA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,A/B6FA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,A/B6FA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,A/B6FA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,ACHA,AhCgGA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,ACHA,AhCgGA,AJYA;AzB4EA,AiCnGA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,ACHA,AhCgGA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,ACHA,AhCgGA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,ACHA,AhCgGA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,ACHA,AhCgGA,AJYA;AzB4EA,A8D1LA,ACHA,A9B0FA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,ACHA,AhCgGA,AJYA;AzB4EA,A8D1LA,ACHA,A9B0FA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,ACHA,AhCgGA,AJYA;AzB4EA,A8D1LA,ACHA,A9B0FA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,ACHA,AhCgGA,AJYA;AzB4EA,A8D1LA,ACHA,A9B0FA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,ACHA,AGTA,AnCyGA,AJYA;AzB4EA,A8D1LA,ACHA,A9B0FA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,ACHA,AGTA,AnCyGA,AJYA;AzB4EA,A8D1LA,ACHA,A9B0FA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,ACHA,AGTA,AnCyGA,AJYA;AzB4EA,A8D1LA,ACHA,A9B0FA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,ACHA,AGTA,ACHA,ApC4GA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,ACHA,AGTA,ACHA,ApC4GA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,ACHA,AGTA,ACHA,ApC4GA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,ACHA,AGTA,ACHA,ACHA,ArC+GA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,ACHA,AGTA,ACHA,ACHA,ArC+GA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,ACHA,AGTA,ACHA,ACHA,ArC+GA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,ACHA,AGTA,ACHA,ACHA,ACHA,AtCkHA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,AOrBA,AOrBA,AIZA,AGTA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,ACHA,AGTA,ACHA,ACHA,ACHA,AtCkHA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,AOrBA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AENA,ACHA,ACHA,AGTA,ACHA,ACHA,ACHA,AtCkHA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,AOrBA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ACHA,ACHA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,AvCqHA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,AOrBA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ACHA,ACHA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,AvCqHA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,AOrBA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ACHA,ACHA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,AvCqHA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,AOrBA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ACHA,ACHA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AxCwHA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,AOrBA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ACHA,ACHA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AxCwHA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,AOrBA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AxCwHA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,AOrBA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AzC2HA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,AOrBA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AzC2HA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,AOrBA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AzC2HA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,AOrBA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,AOrBA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,AOrBA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,A6CvIA,AtCkHA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,A6CvIA,AtCkHA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,A6CvIA,AtCkHA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,A6CvIA,ACHA,AvCqHA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,A6CvIA,ACHA,AvCqHA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,A6CvIA,ACHA,AvCqHA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,A6CvIA,ACHA,AvCqHA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,A6CvIA,ACHA,AvCqHA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,A6CvIA,ACHA,AvCqHA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,A6CvIA,ACHA,AvCqHA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A7BuFA,Ad0CA,AQxBA,A6CvIA,ACHA,AvCqHA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,AENA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A6CvIA,ACHA,AvCqHA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,AENA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A6CvIA,ACHA,AvCqHA,AOrBA,AOrBA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,AENA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A6CvIA,ACHA,AvCqHA,AOrBA,AOrBA,AGTA,AENA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,AENA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AOrBA,AOrBA,AGTA,AENA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,AENA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AOrBA,AOrBA,AGTA,AENA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,AENA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AOrBA,AOrBA,AGTA,AENA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,AENA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AOrBA,AOrBA,AGTA,AENA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,AENA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AOrBA,AOrBA,AGTA,AENA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,AENA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AOrBA,AOrBA,AGTA,AENA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,AENA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AOrBA,AOrBA,AGTA,AENA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,ACHA,AENA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AOrBA,AOrBA,AGTA,AENA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,AGTA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AOrBA,AOrBA,AGTA,AENA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,AGTA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AOrBA,AU9BA,AENA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,AGTA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AOrBA,AU9BA,AENA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,AGTA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AOrBA,AU9BA,AENA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,AGTA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AOrBA,AU9BA,AENA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,AGTA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AOrBA,AU9BA,AENA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,AGTA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AOrBA,AU9BA,AENA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,ACHA,AGTA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AOrBA,AU9BA,AENA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,AIZA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AOrBA,AU9BA,AENA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,AIZA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AOrBA,AU9BA,AENA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,AIZA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AOrBA,AU9BA,AENA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,AIZA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,ACHA,AENA,AENA,ACHA,AGTA,ACHA,AIZA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,ACHA,AIZA,ACHA,AGTA,ACHA,AIZA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,ACHA,AIZA,ACHA,AGTA,ACHA,AIZA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,ACHA,AIZA,ACHA,AGTA,ACHA,AIZA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,ACHA,AIZA,ACHA,AGTA,ACHA,AIZA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,ACHA,AIZA,ACHA,AGTA,ACHA,AIZA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,A8D1LA,A3CiIA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,ACHA,AIZA,ACHA,AGTA,ACHA,AIZA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,ACHA,AIZA,ACHA,AGTA,ACHA,AIZA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,ADGA,AzC2HA,AJYA;AzB4EA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA,AJYA;AzB4EA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA,AJYA;AzB4EA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA,AJYA;AzB4EA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA,AJYA;AzB4EA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA,AJYA;AzB4EA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA,AJYA;AzB4EA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA,AJYA;AzB4EA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA,AJYA;AzB4EA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA,AJYA;AzB4EA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA,AJYA;AzB4EA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA,AJYA;AzB4EA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,ACHA,ACHA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,AENA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,AENA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,AENA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,AENA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmBzDA,AQxBA,A8C1IA,AvCqHA,AiBnDA,AENA,AENA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmBzDA,AsDlKA,AvCqHA,AiBnDA,AENA,AENA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmBzDA,AsDlKA,AvCqHA,AiBnDA,AENA,AENA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmBzDA,AsDlKA,AvCqHA,AiBnDA,AENA,AENA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmBzDA,AsDlKA,AvCqHA,AiBnDA,AENA,AENA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmBzDA,AsDlKA,AvCqHA,AiBnDA,AENA,AENA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmBzDA,AsDlKA,AvCqHA,AiBnDA,AENA,AENA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmBzDA,AsDlKA,AtBkEA,AENA,AENA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmBzDA,AsDlKA,AtBkEA,AENA,AENA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmBzDA,AsDlKA,AtBkEA,AENA,AENA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmBzDA,AsDlKA,AtBkEA,AENA,AENA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmBzDA,AsDlKA,AtBkEA,AENA,AENA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmBzDA,AsDlKA,AtBkEA,AENA,AENA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AyE3NA,AtBkEA,AENA,AENA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AyE3NA,AtBkEA,AENA,AENA,AKfA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AyE3NA,AtBkEA,AENA,AOrBA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AyE3NA,AtBkEA,AENA,AOrBA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AyE3NA,AtBkEA,AENA,AOrBA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AyE3NA,AtBkEA,AENA,AOrBA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AyE3NA,AtBkEA,AENA,AOrBA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AyE3NA,AtBkEA,AENA,AOrBA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AyE3NA,AtBkEA,AENA,AOrBA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AyE3NA,AtBkEA,AENA,AOrBA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AyE3NA,AtBkEA,AENA,AOrBA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AyE3NA,AtBkEA,AENA,AOrBA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmDzJA,AENA,AOrBA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmDzJA,AENA,AOrBA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmDzJA,AENA,AOrBA,ACHA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmDzJA,AENA,AQxBA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmDzJA,AENA,AQxBA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmDzJA,AENA,AQxBA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmDzJA,AENA,AQxBA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmDzJA,AENA,AQxBA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmDzJA,AENA,AQxBA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmDzJA,AENA,AQxBA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmDzJA,AENA,AQxBA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmDzJA,AENA,AQxBA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmDzJA,AENA,AQxBA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmDzJA,AENA,AQxBA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmDzJA,AENA,AQxBA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmDzJA,AU9BA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmDzJA,AU9BA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmDzJA,AU9BA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmDzJA,AU9BA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmDzJA,AU9BA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmDzJA,AU9BA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmDzJA,AU9BA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,AmDzJA,AU9BA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AENA,A1C8HA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA,AxCwHA;A7BwFA,A6DvLA,AGTA,ACHA,AIZA;ArEgNA,A6DvLA,AGTA,ACHA,AIZA;ArEgNA,A6DvLA,AGTA,ACHA,AIZA;ArEgNA,A6DvLA,AGTA,ACHA,AIZA;ArEgNA,A6DvLA,AGTA,ACHA,AIZA;ArEgNA,A6DvLA,AGTA,ACHA,AIZA;ArEgNA,A6DvLA,AGTA,ACHA,AIZA;ArEgNA,A6DvLA,AGTA,ACHA,AIZA;ArEgNA,A6DvLA,AGTA,ACHA,AIZA;ArEgNA,A6DvLA,AGTA,ACHA,AIZA;ArEgNA,A6DvLA,AGTA,ACHA,AIZA;ArEgNA,A6DvLA,AGTA,ACHA,AIZA;ArEgNA,A6DvLA,AGTA,ACHA,AIZA;ArEgNA,A6DvLA,AGTA,ACHA,AIZA;ArEgNA,A6DvLA,AGTA,ACHA,AIZA;ArEgNA,A6DvLA,AGTA,ACHA,AIZA;ArEgNA,A6DvLA,AGTA,ACHA,AIZA;ArEgNA,A6DvLA,AGTA,ACHA,AIZA;ArEgNA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA,ACHA;AjEoMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA,AGTA;AhEiMA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7DwLA,A6DvLA;A7Dwfile":"index.js","sourcesContent":["\n\nmodule.exports = require('./buffer.js')\n","\n\nmodule.exports = require('./dist')\n","\n\nvar html = require('./compile/html.js')\nvar parse = require('./parse.js')\nvar postprocess = require('./postprocess.js')\nvar preprocess = require('./preprocess.js')\n\nfunction buffer(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding\n    encoding = undefined\n  }\n\n  return html(options)(\n    postprocess(\n      parse(options).document().write(preprocess()(value, encoding, true))\n    )\n  )\n}\n\nmodule.exports = buffer\n","\n\nvar decodeEntity = require('parse-entities/decode-entity.js')\nvar assign = require('../constant/assign.js')\nvar hasOwnProperty = require('../constant/has-own-property.js')\nvar combineHtmlExtensions = require('../util/combine-html-extensions.js')\nvar chunkedPush = require('../util/chunked-push.js')\nvar miniflat = require('../util/miniflat.js')\nvar normalizeIdentifier = require('../util/normalize-identifier.js')\nvar normalizeUri = require('../util/normalize-uri.js')\nvar safeFromInt = require('../util/safe-from-int.js')\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {default: e}\n}\n\nvar decodeEntity__default = /*#__PURE__*/ _interopDefaultLegacy(decodeEntity)\n\n// While micromark is a lexer/tokenizer, the common case of going from markdown\n// dealt with.\n// Technically, we can skip `>` and `\"` in many cases, but CM includes them.\n\nvar characterReferences = {\n  '\"': 'quot',\n  '&': 'amp',\n  '<': 'lt',\n  '>': 'gt'\n} // These two are allowlists of essentially safe protocols for full URLs in\n// respectively the `href` (on `<a>`) and `src` (on `<img>`) attributes.\n// They are based on what is allowed on GitHub,\n// <https://github.com/syntax-tree/hast-util-sanitize/blob/9275b21/lib/github.json#L31>\n\nvar protocolHref = /^(https?|ircs?|mailto|xmpp)$/i\nvar protocolSrc = /^https?$/i\n\nfunction compileHtml(options) {\n  // Configuration.\n  // Includes `htmlExtensions` (an array of extensions), `defaultLineEnding` (a\n  // preferred EOL), `allowDangerousProtocol` (whether to allow potential\n  // dangerous protocols), and `allowDangerousHtml` (whether to allow potential\n  // dangerous HTML).\n  var settings = options || {} // Tags is needed because according to markdown, links and emphasis and\n  // whatnot can exist in images, however, as HTML doesn’t allow content in\n  // images, the tags are ignored in the `alt` attribute, but the content\n  // remains.\n\n  var tags = true // An object to track identifiers to media (URLs and titles) defined with\n  // definitions.\n\n  var definitions = {} // A lot of the handlers need to capture some of the output data, modify it\n  // somehow, and then deal with it.\n  // We do that by tracking a stack of buffers, that can be opened (with\n  // `buffer`) and closed (with `resume`) to access them.\n\n  var buffers = [[]] // As we can have links in images and the other way around, where the deepest\n  // ones are closed first, we need to track which one we’re in.\n\n  var mediaStack = [] // Same for tightness, which is specific to lists.\n  // We need to track if we’re currently in a tight or loose container.\n\n  var tightStack = []\n  var defaultHandlers = {\n    enter: {\n      blockQuote: onenterblockquote,\n      codeFenced: onentercodefenced,\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: onentercodeindented,\n      codeText: onentercodetext,\n      content: onentercontent,\n      definition: onenterdefinition,\n      definitionDestinationString: onenterdefinitiondestinationstring,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: onenteremphasis,\n      htmlFlow: onenterhtmlflow,\n      htmlText: onenterhtml,\n      image: onenterimage,\n      label: buffer,\n      link: onenterlink,\n      listItemMarker: onenterlistitemmarker,\n      listItemValue: onenterlistitemvalue,\n      listOrdered: onenterlistordered,\n      listUnordered: onenterlistunordered,\n      paragraph: onenterparagraph,\n      reference: buffer,\n      resource: onenterresource,\n      resourceDestinationString: onenterresourcedestinationstring,\n      resourceTitleString: buffer,\n      setextHeading: onentersetextheading,\n      strong: onenterstrong\n    },\n    exit: {\n      atxHeading: onexitatxheading,\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: onexitblockquote,\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: onexitflowcode,\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: resume,\n      codeFlowValue: onexitcodeflowvalue,\n      codeIndented: onexitflowcode,\n      codeText: onexitcodetext,\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: onexitdefinition,\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: onexitemphasis,\n      hardBreakEscape: onexithardbreak,\n      hardBreakTrailing: onexithardbreak,\n      htmlFlow: onexithtml,\n      htmlFlowData: onexitdata,\n      htmlText: onexithtml,\n      htmlTextData: onexitdata,\n      image: onexitmedia,\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: onexitmedia,\n      listOrdered: onexitlistordered,\n      listUnordered: onexitlistunordered,\n      paragraph: onexitparagraph,\n      reference: resume,\n      referenceString: onexitreferencestring,\n      resource: resume,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      setextHeading: onexitsetextheading,\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: onexitstrong,\n      thematicBreak: onexitthematicbreak\n    }\n  } // Combine the HTML extensions with the default handlers.\n  // An HTML extension is an object whose fields are either `enter` or `exit`\n  // (reflecting whether a token is entered or exited).\n  // The values at such objects are names of tokens mapping to handlers.\n  // Handlers are called, respectively when a token is opener or closed, with\n  // that token, and a context as `this`.\n\n  var handlers = combineHtmlExtensions(\n    [defaultHandlers].concat(miniflat(settings.htmlExtensions))\n  ) // Handlers do often need to keep track of some state.\n  // That state is provided here as a key-value store (an object).\n\n  var data = {\n    tightStack: tightStack\n  } // The context for handlers references a couple of useful functions.\n  // In handlers from extensions, those can be accessed at `this`.\n  // For the handlers here, they can be accessed directly.\n\n  var context = {\n    lineEndingIfNeeded: lineEndingIfNeeded,\n    options: settings,\n    encode: encode,\n    raw: raw,\n    tag: tag,\n    buffer: buffer,\n    resume: resume,\n    setData: setData,\n    getData: getData\n  } // Generally, micromark copies line endings (`'\\r'`, `'\\n'`, `'\\r\\n'`) in the\n  // markdown document over to the compiled HTML.\n  // In some cases, such as `> a`, CommonMark requires that extra line endings\n  // are added: `<blockquote>\\n<p>a</p>\\n</blockquote>`.\n  // This variable hold the default line ending when given (or `undefined`),\n  // and in the latter case will be updated to the first found line ending if\n  // there is one.\n\n  var lineEndingStyle = settings.defaultLineEnding // Return the function that handles a slice of events.\n\n  return compile // Deal w/ a slice of events.\n  // Return either the empty string if there’s nothing of note to return, or the\n  // result when done.\n\n  function compile(events) {\n    // As definitions can come after references, we need to figure out the media\n    // (urls and titles) defined by them before handling the references.\n    // So, we do sort of what HTML does: put metadata at the start (in head), and\n    // then put content after (`body`).\n    var head = []\n    var body = []\n    var index\n    var start\n    var listStack\n    var handler\n    var result\n    index = -1\n    start = 0\n    listStack = []\n\n    while (++index < events.length) {\n      // Figure out the line ending style used in the document.\n      if (\n        !lineEndingStyle &&\n        (events[index][1].type === 'lineEnding' ||\n          events[index][1].type === 'lineEndingBlank')\n      ) {\n        lineEndingStyle = events[index][2].sliceSerialize(events[index][1])\n      } // Preprocess lists to infer whether the list is loose or not.\n\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          prepareList(events.slice(listStack.pop(), index))\n        }\n      } // Move definitions to the front.\n\n      if (events[index][1].type === 'definition') {\n        if (events[index][0] === 'enter') {\n          body = chunkedPush(body, events.slice(start, index))\n          start = index\n        } else {\n          head = chunkedPush(head, events.slice(start, index + 1))\n          start = index + 1\n        }\n      }\n    }\n\n    head = chunkedPush(head, body)\n    head = chunkedPush(head, events.slice(start))\n    result = head\n    index = -1 // Handle the start of the document, if defined.\n\n    if (handlers.enter.null) {\n      handlers.enter.null.call(context)\n    } // Handle all events.\n\n    while (++index < events.length) {\n      handler = handlers[result[index][0]]\n\n      if (hasOwnProperty.call(handler, result[index][1].type)) {\n        handler[result[index][1].type].call(\n          assign(\n            {\n              sliceSerialize: result[index][2].sliceSerialize\n            },\n            context\n          ),\n          result[index][1]\n        )\n      }\n    } // Handle the end of the document, if defined.\n\n    if (handlers.exit.null) {\n      handlers.exit.null.call(context)\n    }\n\n    return buffers[0].join('')\n  } // Figure out whether lists are loose or not.\n\n  function prepareList(slice) {\n    var length = slice.length - 1 // Skip close.\n\n    var index = 0 // Skip open.\n\n    var containerBalance = 0\n    var loose\n    var atMarker\n    var event\n\n    while (++index < length) {\n      event = slice[index]\n\n      if (event[1]._container) {\n        atMarker = undefined\n\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n      } else if (event[1].type === 'listItemPrefix') {\n        if (event[0] === 'exit') {\n          atMarker = true\n        }\n      } else if (event[1].type === 'linePrefix');\n      else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter' && !containerBalance) {\n          if (atMarker) {\n            atMarker = undefined\n          } else {\n            loose = true\n          }\n        }\n      } else {\n        atMarker = undefined\n      }\n    }\n\n    slice[0][1]._loose = loose\n  } // Set data into the key-value store.\n\n  function setData(key, value) {\n    data[key] = value\n  } // Get data from the key-value store.\n\n  function getData(key) {\n    return data[key]\n  } // Capture some of the output data.\n\n  function buffer() {\n    buffers.push([])\n  } // Stop capturing and access the output data.\n\n  function resume() {\n    return buffers.pop().join('')\n  } // Output (parts of) HTML tags.\n\n  function tag(value) {\n    if (!tags) return\n    setData('lastWasTag', true)\n    buffers[buffers.length - 1].push(value)\n  } // Output raw data.\n\n  function raw(value) {\n    setData('lastWasTag')\n    buffers[buffers.length - 1].push(value)\n  } // Output an extra line ending.\n\n  function lineEnding() {\n    raw(lineEndingStyle || '\\n')\n  } // Output an extra line ending if the previous value wasn’t EOF/EOL.\n\n  function lineEndingIfNeeded() {\n    var buffer = buffers[buffers.length - 1]\n    var slice = buffer[buffer.length - 1]\n    var previous = slice ? slice.charCodeAt(slice.length - 1) : null\n\n    if (previous === 10 || previous === 13 || previous === null) {\n      return\n    }\n\n    lineEnding()\n  } // Make a value safe for injection in HTML (except w/ `ignoreEncode`).\n\n  function encode(value) {\n    return getData('ignoreEncode') ? value : value.replace(/[\"&<>]/g, replace)\n\n    function replace(value) {\n      return '&' + characterReferences[value] + ';'\n    }\n  } // Make a value safe for injection as a URL.\n  // This does encode unsafe characters with percent-encoding, skipping already\n  // encoded sequences (`normalizeUri`).\n  // Further unsafe characters are encoded as character references (`encode`).\n  // Finally, if the URL includes an unknown protocol (such as a dangerous\n  // example, `javascript:`), the value is ignored.\n\n  function url(url, protocol) {\n    var value = encode(normalizeUri(url || ''))\n    var colon = value.indexOf(':')\n    var questionMark = value.indexOf('?')\n    var numberSign = value.indexOf('#')\n    var slash = value.indexOf('/')\n\n    if (\n      settings.allowDangerousProtocol || // If there is no protocol, it’s relative.\n      colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n      (slash > -1 && colon > slash) ||\n      (questionMark > -1 && colon > questionMark) ||\n      (numberSign > -1 && colon > numberSign) || // It is a protocol, it should be allowed.\n      protocol.test(value.slice(0, colon))\n    ) {\n      return value\n    }\n\n    return ''\n  } //\n  // Handlers.\n  //\n\n  function onenterlistordered(token) {\n    tightStack.push(!token._loose)\n    lineEndingIfNeeded()\n    tag('<ol')\n    setData('expectFirstItem', true)\n  }\n\n  function onenterlistunordered(token) {\n    tightStack.push(!token._loose)\n    lineEndingIfNeeded()\n    tag('<ul')\n    setData('expectFirstItem', true)\n  }\n\n  function onenterlistitemvalue(token) {\n    var value\n\n    if (getData('expectFirstItem')) {\n      value = parseInt(this.sliceSerialize(token), 10)\n\n      if (value !== 1) {\n        tag(' start=\"' + encode(String(value)) + '\"')\n      }\n    }\n  }\n\n  function onenterlistitemmarker() {\n    if (getData('expectFirstItem')) {\n      tag('>')\n    } else {\n      onexitlistitem()\n    }\n\n    lineEndingIfNeeded()\n    tag('<li>')\n    setData('expectFirstItem') // “Hack” to prevent a line ending from showing up if the item is empty.\n\n    setData('lastWasTag')\n  }\n\n  function onexitlistordered() {\n    onexitlistitem()\n    tightStack.pop()\n    lineEnding()\n    tag('</ol>')\n  }\n\n  function onexitlistunordered() {\n    onexitlistitem()\n    tightStack.pop()\n    lineEnding()\n    tag('</ul>')\n  }\n\n  function onexitlistitem() {\n    if (getData('lastWasTag') && !getData('slurpAllLineEndings')) {\n      lineEndingIfNeeded()\n    }\n\n    tag('</li>')\n    setData('slurpAllLineEndings')\n  }\n\n  function onenterblockquote() {\n    tightStack.push(false)\n    lineEndingIfNeeded()\n    tag('<blockquote>')\n  }\n\n  function onexitblockquote() {\n    tightStack.pop()\n    lineEndingIfNeeded()\n    tag('</blockquote>')\n    setData('slurpAllLineEndings')\n  }\n\n  function onenterparagraph() {\n    if (!tightStack[tightStack.length - 1]) {\n      lineEndingIfNeeded()\n      tag('<p>')\n    }\n\n    setData('slurpAllLineEndings')\n  }\n\n  function onexitparagraph() {\n    if (tightStack[tightStack.length - 1]) {\n      setData('slurpAllLineEndings', true)\n    } else {\n      tag('</p>')\n    }\n  }\n\n  function onentercodefenced() {\n    lineEndingIfNeeded()\n    tag('<pre><code')\n    setData('fencesCount', 0)\n  }\n\n  function onexitcodefencedfenceinfo() {\n    var value = resume()\n    tag(' class=\"language-' + value + '\"')\n  }\n\n  function onexitcodefencedfence() {\n    if (!getData('fencesCount')) {\n      tag('>')\n      setData('fencedCodeInside', true)\n      setData('slurpOneLineEnding', true)\n    }\n\n    setData('fencesCount', getData('fencesCount') + 1)\n  }\n\n  function onentercodeindented() {\n    lineEndingIfNeeded()\n    tag('<pre><code>')\n  }\n\n  function onexitflowcode() {\n    // Send an extra line feed if we saw data.\n    if (getData('flowCodeSeenData')) lineEndingIfNeeded()\n    tag('</code></pre>')\n    if (getData('fencesCount') < 2) lineEndingIfNeeded()\n    setData('flowCodeSeenData')\n    setData('fencesCount')\n    setData('slurpOneLineEnding')\n  }\n\n  function onenterimage() {\n    mediaStack.push({\n      image: true\n    })\n    tags = undefined // Disallow tags.\n  }\n\n  function onenterlink() {\n    mediaStack.push({})\n  }\n\n  function onexitlabeltext(token) {\n    mediaStack[mediaStack.length - 1].labelId = this.sliceSerialize(token)\n  }\n\n  function onexitlabel() {\n    mediaStack[mediaStack.length - 1].label = resume()\n  }\n\n  function onexitreferencestring(token) {\n    mediaStack[mediaStack.length - 1].referenceId = this.sliceSerialize(token)\n  }\n\n  function onenterresource() {\n    buffer() // We can have line endings in the resource, ignore them.\n\n    mediaStack[mediaStack.length - 1].destination = ''\n  }\n\n  function onenterresourcedestinationstring() {\n    buffer() // Ignore encoding the result, as we’ll first percent encode the url and\n    // encode manually after.\n\n    setData('ignoreEncode', true)\n  }\n\n  function onexitresourcedestinationstring() {\n    mediaStack[mediaStack.length - 1].destination = resume()\n    setData('ignoreEncode')\n  }\n\n  function onexitresourcetitlestring() {\n    mediaStack[mediaStack.length - 1].title = resume()\n  }\n\n  function onexitmedia() {\n    var index = mediaStack.length - 1 // Skip current.\n\n    var media = mediaStack[index]\n    var context =\n      media.destination === undefined\n        ? definitions[normalizeIdentifier(media.referenceId || media.labelId)]\n        : media\n    tags = true\n\n    while (index--) {\n      if (mediaStack[index].image) {\n        tags = undefined\n        break\n      }\n    }\n\n    if (media.image) {\n      tag('<img src=\"' + url(context.destination, protocolSrc) + '\" alt=\"')\n      raw(media.label)\n      tag('\"')\n    } else {\n      tag('<a href=\"' + url(context.destination, protocolHref) + '\"')\n    }\n\n    tag(context.title ? ' title=\"' + context.title + '\"' : '')\n\n    if (media.image) {\n      tag(' />')\n    } else {\n      tag('>')\n      raw(media.label)\n      tag('</a>')\n    }\n\n    mediaStack.pop()\n  }\n\n  function onenterdefinition() {\n    buffer()\n    mediaStack.push({})\n  }\n\n  function onexitdefinitionlabelstring(token) {\n    // Discard label, use the source content instead.\n    resume()\n    mediaStack[mediaStack.length - 1].labelId = this.sliceSerialize(token)\n  }\n\n  function onenterdefinitiondestinationstring() {\n    buffer()\n    setData('ignoreEncode', true)\n  }\n\n  function onexitdefinitiondestinationstring() {\n    mediaStack[mediaStack.length - 1].destination = resume()\n    setData('ignoreEncode')\n  }\n\n  function onexitdefinitiontitlestring() {\n    mediaStack[mediaStack.length - 1].title = resume()\n  }\n\n  function onexitdefinition() {\n    var id = normalizeIdentifier(mediaStack[mediaStack.length - 1].labelId)\n    resume()\n\n    if (!hasOwnProperty.call(definitions, id)) {\n      definitions[id] = mediaStack[mediaStack.length - 1]\n    }\n\n    mediaStack.pop()\n  }\n\n  function onentercontent() {\n    setData('slurpAllLineEndings', true)\n  }\n\n  function onexitatxheadingsequence(token) {\n    // Exit for further sequences.\n    if (getData('headingRank')) return\n    setData('headingRank', this.sliceSerialize(token).length)\n    lineEndingIfNeeded()\n    tag('<h' + getData('headingRank') + '>')\n  }\n\n  function onentersetextheading() {\n    buffer()\n    setData('slurpAllLineEndings')\n  }\n\n  function onexitsetextheadingtext() {\n    setData('slurpAllLineEndings', true)\n  }\n\n  function onexitatxheading() {\n    tag('</h' + getData('headingRank') + '>')\n    setData('headingRank')\n  }\n\n  function onexitsetextheadinglinesequence(token) {\n    setData(\n      'headingRank',\n      this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n    )\n  }\n\n  function onexitsetextheading() {\n    var value = resume()\n    lineEndingIfNeeded()\n    tag('<h' + getData('headingRank') + '>')\n    raw(value)\n    tag('</h' + getData('headingRank') + '>')\n    setData('slurpAllLineEndings')\n    setData('headingRank')\n  }\n\n  function onexitdata(token) {\n    raw(encode(this.sliceSerialize(token)))\n  }\n\n  function onexitlineending(token) {\n    if (getData('slurpAllLineEndings')) {\n      return\n    }\n\n    if (getData('slurpOneLineEnding')) {\n      setData('slurpOneLineEnding')\n      return\n    }\n\n    if (getData('inCodeText')) {\n      raw(' ')\n      return\n    }\n\n    raw(encode(this.sliceSerialize(token)))\n  }\n\n  function onexitcodeflowvalue(token) {\n    raw(encode(this.sliceSerialize(token)))\n    setData('flowCodeSeenData', true)\n  }\n\n  function onexithardbreak() {\n    tag('<br />')\n  }\n\n  function onenterhtmlflow() {\n    lineEndingIfNeeded()\n    onenterhtml()\n  }\n\n  function onexithtml() {\n    setData('ignoreEncode')\n  }\n\n  function onenterhtml() {\n    if (settings.allowDangerousHtml) {\n      setData('ignoreEncode', true)\n    }\n  }\n\n  function onenteremphasis() {\n    tag('<em>')\n  }\n\n  function onenterstrong() {\n    tag('<strong>')\n  }\n\n  function onentercodetext() {\n    setData('inCodeText', true)\n    tag('<code>')\n  }\n\n  function onexitcodetext() {\n    setData('inCodeText')\n    tag('</code>')\n  }\n\n  function onexitemphasis() {\n    tag('</em>')\n  }\n\n  function onexitstrong() {\n    tag('</strong>')\n  }\n\n  function onexitthematicbreak() {\n    lineEndingIfNeeded()\n    tag('<hr />')\n  }\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  function onexitcharacterreferencevalue(token) {\n    var value = this.sliceSerialize(token)\n    value = getData('characterReferenceType')\n      ? safeFromInt(\n          value,\n          getData('characterReferenceType') ===\n            'characterReferenceMarkerNumeric'\n            ? 10\n            : 16\n        )\n      : decodeEntity__default['default'](value)\n    raw(encode(value))\n    setData('characterReferenceType')\n  }\n\n  function onexitautolinkprotocol(token) {\n    var uri = this.sliceSerialize(token)\n    tag('<a href=\"' + url(uri, protocolHref) + '\">')\n    raw(encode(uri))\n    tag('</a>')\n  }\n\n  function onexitautolinkemail(token) {\n    var uri = this.sliceSerialize(token)\n    tag('<a href=\"' + url('mailto:' + uri, protocolHref) + '\">')\n    raw(encode(uri))\n    tag('</a>')\n  }\n}\n\nmodule.exports = compileHtml\n","\n\nvar assign = Object.assign\n\nmodule.exports = assign\n","\n\nvar own = {}.hasOwnProperty\n\nmodule.exports = own\n","\n\nvar hasOwnProperty = require('../constant/has-own-property.js')\n\nfunction combineHtmlExtensions(extensions) {\n  var handlers = {}\n  var index = -1\n\n  while (++index < extensions.length) {\n    extension(handlers, extensions[index])\n  }\n\n  return handlers\n}\n\nfunction extension(handlers, extension) {\n  var hook\n  var left\n  var right\n  var type\n\n  for (hook in extension) {\n    left = hasOwnProperty.call(handlers, hook)\n      ? handlers[hook]\n      : (handlers[hook] = {})\n    right = extension[hook]\n\n    for (type in right) {\n      left[type] = right[type]\n    }\n  }\n}\n\nmodule.exports = combineHtmlExtensions\n","\n\nvar chunkedSplice = require('./chunked-splice.js')\n\nfunction chunkedPush(list, items) {\n  if (list.length) {\n    chunkedSplice(list, list.length, 0, items)\n    return list\n  }\n\n  return items\n}\n\nmodule.exports = chunkedPush\n","\n\nvar splice = require('../constant/splice.js')\n\n// causes a stack overflow in V8 when trying to insert 100k items for instance.\n\nfunction chunkedSplice(list, start, remove, items) {\n  var end = list.length\n  var chunkStart = 0\n  var parameters // Make start between zero and `end` (included).\n\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n\n  remove = remove > 0 ? remove : 0 // No need to chunk the items if there’s only a couple (10k) items.\n\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    splice.apply(list, parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) splice.apply(list, [start, remove]) // Insert the items in chunks to not cause stack overflows.\n\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      splice.apply(list, parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\nmodule.exports = chunkedSplice\n","\n\nvar splice = [].splice\n\nmodule.exports = splice\n","\n\nfunction miniflat(value) {\n  return value === null || value === undefined\n    ? []\n    : 'length' in value\n    ? value\n    : [value]\n}\n\nmodule.exports = miniflat\n","\n\nfunction normalizeIdentifier(value) {\n  return (\n    value // Collapse Markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ') // Trim.\n      .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no object method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n\nmodule.exports = normalizeIdentifier\n","\n\nvar asciiAlphanumeric = require('../character/ascii-alphanumeric.js')\nvar fromCharCode = require('../constant/from-char-code.js')\n\n// encoded sequences.\n\nfunction normalizeUri(value) {\n  var index = -1\n  var result = []\n  var start = 0\n  var skip = 0\n  var code\n  var next\n  var replace\n\n  while (++index < value.length) {\n    code = value.charCodeAt(index) // A correct percent encoded value.\n\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    } // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(fromCharCode(code))) {\n        replace = fromCharCode(code)\n      }\n    } // Astral.\n    else if (code > 55295 && code < 57344) {\n      next = value.charCodeAt(index + 1) // A correct surrogate pair.\n\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = fromCharCode(code, next)\n        skip = 1\n      } // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    } // Unicode.\n    else {\n      replace = fromCharCode(code)\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = undefined\n    }\n\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n\n  return result.join('') + value.slice(start)\n}\n\nmodule.exports = normalizeUri\n","\n\nvar regexCheck = require('../util/regex-check.js')\n\nvar asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\nmodule.exports = asciiAlphanumeric\n","\n\nvar fromCharCode = require('../constant/from-char-code.js')\n\nfunction regexCheck(regex) {\n  return check\n\n  function check(code) {\n    return regex.test(fromCharCode(code))\n  }\n}\n\nmodule.exports = regexCheck\n","\n\nvar fromCharCode = String.fromCharCode\n\nmodule.exports = fromCharCode\n","\n\nvar fromCharCode = require('../constant/from-char-code.js')\n\nfunction safeFromInt(value, base) {\n  var code = parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.\n    (code > 126 && code < 160) || // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) || // Noncharacters.\n    (code > 64975 && code < 65008) ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 || // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n\n  return fromCharCode(code)\n}\n\nmodule.exports = safeFromInt\n","\n\nvar content = require('./initialize/content.js')\nvar document = require('./initialize/document.js')\nvar flow = require('./initialize/flow.js')\nvar text = require('./initialize/text.js')\nvar combineExtensions = require('./util/combine-extensions.js')\nvar createTokenizer = require('./util/create-tokenizer.js')\nvar miniflat = require('./util/miniflat.js')\nvar constructs = require('./constructs.js')\n\nfunction parse(options) {\n  var settings = options || {}\n  var parser = {\n    defined: [],\n    constructs: combineExtensions(\n      [constructs].concat(miniflat(settings.extensions))\n    ),\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(text.string),\n    text: create(text.text)\n  }\n  return parser\n\n  function create(initializer) {\n    return creator\n\n    function creator(from) {\n      return createTokenizer(parser, initializer, from)\n    }\n  }\n}\n\nmodule.exports = parse\n","\n\nObject.defineProperty(exports, '__esModule', {value: true})\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\nvar factorySpace = require('../tokenize/factory-space.js')\n\nvar tokenize = initializeContent\n\nfunction initializeContent(effects) {\n  var contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  var previous\n  return contentStart\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  function lineStart(code) {\n    var token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous: previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n    return data(code)\n  }\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n}\n\nexports.tokenize = tokenize\n","\n\nfunction markdownLineEnding(code) {\n  return code < -2\n}\n\nmodule.exports = markdownLineEnding\n","\n\nvar markdownSpace = require('../character/markdown-space.js')\n\nfunction spaceFactory(effects, ok, type, max) {\n  var limit = max ? max - 1 : Infinity\n  var size = 0\n  return start\n\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n\n    return ok(code)\n  }\n\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n\n    effects.exit(type)\n    return ok(code)\n  }\n}\n\nmodule.exports = spaceFactory\n","\n\nfunction markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\nmodule.exports = markdownSpace\n","\n\nObject.defineProperty(exports, '__esModule', {value: true})\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\nvar factorySpace = require('../tokenize/factory-space.js')\nvar partialBlankLine = require('../tokenize/partial-blank-line.js')\n\nvar tokenize = initializeDocument\nvar containerConstruct = {\n  tokenize: tokenizeContainer\n}\nvar lazyFlowConstruct = {\n  tokenize: tokenizeLazyFlow\n}\n\nfunction initializeDocument(effects) {\n  var self = this\n  var stack = []\n  var continued = 0\n  var inspectConstruct = {\n    tokenize: tokenizeInspect,\n    partial: true\n  }\n  var inspectResult\n  var childFlow\n  var childToken\n  return start\n\n  function start(code) {\n    if (continued < stack.length) {\n      self.containerState = stack[continued][1]\n      return effects.attempt(\n        stack[continued][0].continuation,\n        documentContinue,\n        documentContinued\n      )(code)\n    }\n\n    return documentContinued(code)\n  }\n\n  function documentContinue(code) {\n    continued++\n    return start(code)\n  }\n\n  function documentContinued(code) {\n    // If we’re in a concrete construct (such as when expecting another line of\n    // HTML, or we resulted in lazy content), we can immediately start flow.\n    if (inspectResult && inspectResult.flowContinue) {\n      return flowStart(code)\n    }\n\n    self.interrupt =\n      childFlow &&\n      childFlow.currentConstruct &&\n      childFlow.currentConstruct.interruptible\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  function containerContinue(code) {\n    stack.push([self.currentConstruct, self.containerState])\n    self.containerState = undefined\n    return documentContinued(code)\n  }\n\n  function flowStart(code) {\n    if (code === null) {\n      exitContainers(0, true)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  function flowContinue(code) {\n    if (code === null) {\n      continueFlow(effects.exit('chunkFlow'))\n      return flowStart(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      continueFlow(effects.exit('chunkFlow'))\n      return effects.check(inspectConstruct, documentAfterPeek)\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n\n  function documentAfterPeek(code) {\n    exitContainers(\n      inspectResult.continued,\n      inspectResult && inspectResult.flowEnd\n    )\n    continued = 0\n    return start(code)\n  }\n\n  function continueFlow(token) {\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.lazy = inspectResult && inspectResult.lazy\n    childFlow.defineSkip(token.start)\n    childFlow.write(self.sliceStream(token))\n  }\n\n  function exitContainers(size, end) {\n    var index = stack.length // Close the flow.\n\n    if (childFlow && end) {\n      childFlow.write([null])\n      childToken = childFlow = undefined\n    } // Exit open containers.\n\n    while (index-- > size) {\n      self.containerState = stack[index][1]\n      stack[index][0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function tokenizeInspect(effects, ok) {\n    var subcontinued = 0\n    inspectResult = {}\n    return inspectStart\n\n    function inspectStart(code) {\n      if (subcontinued < stack.length) {\n        self.containerState = stack[subcontinued][1]\n        return effects.attempt(\n          stack[subcontinued][0].continuation,\n          inspectContinue,\n          inspectLess\n        )(code)\n      } // If we’re continued but in a concrete flow, we can’t have more\n      // containers.\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        inspectResult.flowContinue = true\n        return inspectDone(code)\n      }\n\n      self.interrupt =\n        childFlow.currentConstruct && childFlow.currentConstruct.interruptible\n      self.containerState = {}\n      return effects.attempt(\n        containerConstruct,\n        inspectFlowEnd,\n        inspectDone\n      )(code)\n    }\n\n    function inspectContinue(code) {\n      subcontinued++\n      return self.containerState._closeFlow\n        ? inspectFlowEnd(code)\n        : inspectStart(code)\n    }\n\n    function inspectLess(code) {\n      if (childFlow.currentConstruct && childFlow.currentConstruct.lazy) {\n        // Maybe another container?\n        self.containerState = {}\n        return effects.attempt(\n          containerConstruct,\n          inspectFlowEnd, // Maybe flow, or a blank line?\n          effects.attempt(\n            lazyFlowConstruct,\n            inspectFlowEnd,\n            effects.check(partialBlankLine, inspectFlowEnd, inspectLazy)\n          )\n        )(code)\n      } // Otherwise we’re interrupting.\n\n      return inspectFlowEnd(code)\n    }\n\n    function inspectLazy(code) {\n      // Act as if all containers are continued.\n      subcontinued = stack.length\n      inspectResult.lazy = true\n      inspectResult.flowContinue = true\n      return inspectDone(code)\n    } // We’re done with flow if we have more containers, or an interruption.\n\n    function inspectFlowEnd(code) {\n      inspectResult.flowEnd = true\n      return inspectDone(code)\n    }\n\n    function inspectDone(code) {\n      inspectResult.continued = subcontinued\n      self.interrupt = self.containerState = undefined\n      return ok(code)\n    }\n  }\n}\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.indexOf('codeIndented') > -1\n      ? undefined\n      : 4\n  )\n}\n\nfunction tokenizeLazyFlow(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.lazy(this.parser.constructs.flow, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.indexOf('codeIndented') > -1\n      ? undefined\n      : 4\n  )\n}\n\nexports.tokenize = tokenize\n","\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\nvar factorySpace = require('./factory-space.js')\n\nvar partialBlankLine = {\n  tokenize: tokenizePartialBlankLine,\n  partial: true\n}\n\nfunction tokenizePartialBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, 'linePrefix')\n\n  function afterWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n\nmodule.exports = partialBlankLine\n","\n\nObject.defineProperty(exports, '__esModule', {value: true})\n\nvar content = require('../tokenize/content.js')\nvar factorySpace = require('../tokenize/factory-space.js')\nvar partialBlankLine = require('../tokenize/partial-blank-line.js')\n\nvar tokenize = initializeFlow\n\nfunction initializeFlow(effects) {\n  var self = this\n  var initial = effects.attempt(\n    // Try to parse a blank line.\n    partialBlankLine,\n    atBlankEnding, // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n\nexports.tokenize = tokenize\n","\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\nvar prefixSize = require('../util/prefix-size.js')\nvar subtokenize = require('../util/subtokenize.js')\nvar factorySpace = require('./factory-space.js')\n\n// No name because it must not be turned off.\nvar content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent,\n  interruptible: true,\n  lazy: true\n}\nvar continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n} // Content is transparent: it’s parsed right now. That way, definitions are also\n// parsed right now: before text in paragraphs (specifically, media) are parsed.\n\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\nfunction tokenizeContent(effects, ok) {\n  var previous\n  return start\n\n  function start(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return data(code)\n  }\n\n  function data(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous = previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous: previous\n    })\n    return data\n  }\n}\n\nfunction tokenizeContinuation(effects, ok, nok) {\n  var self = this\n  return startLookahead\n\n  function startLookahead(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (\n      self.parser.constructs.disable.null.indexOf('codeIndented') > -1 ||\n      prefixSize(self.events, 'linePrefix') < 4\n    ) {\n      return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n    }\n\n    return ok(code)\n  }\n}\n\nmodule.exports = content\n","\n\nvar sizeChunks = require('./size-chunks.js')\n\nfunction prefixSize(events, type) {\n  var tail = events[events.length - 1]\n  if (!tail || tail[1].type !== type) return 0\n  return sizeChunks(tail[2].sliceStream(tail[1]))\n}\n\nmodule.exports = prefixSize\n","\n\n// Counts tabs based on their expanded size, and CR+LF as one character.\n\nfunction sizeChunks(chunks) {\n  var index = -1\n  var size = 0\n\n  while (++index < chunks.length) {\n    size += typeof chunks[index] === 'string' ? chunks[index].length : 1\n  }\n\n  return size\n}\n\nmodule.exports = sizeChunks\n","\n\nvar assign = require('../constant/assign.js')\nvar chunkedSplice = require('./chunked-splice.js')\nvar shallow = require('./shallow.js')\n\nfunction subtokenize(events) {\n  var jumps = {}\n  var index = -1\n  var event\n  var lineIndex\n  var otherIndex\n  var otherEvent\n  var parameters\n  var subevents\n  var more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index] // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1].isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    } // Enter.\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    } // Exit.\n    else if (event[1]._container || event[1]._movePreviousLineEndings) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = shallow(events[lineIndex][1].start) // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        chunkedSplice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n\nfunction subcontent(events, eventIndex) {\n  var token = events[eventIndex][1]\n  var context = events[eventIndex][2]\n  var startPosition = eventIndex - 1\n  var startPositions = []\n  var tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  var childEvents = tokenizer.events\n  var jumps = []\n  var gaps = {}\n  var stream\n  var previous\n  var index\n  var entered\n  var end\n  var adjust // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (token) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== token) {\n      // Empty.\n    }\n\n    startPositions.push(startPosition)\n\n    if (!token._tokenizer) {\n      stream = context.sliceStream(token)\n\n      if (!token.next) {\n        stream.push(null)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(token.start)\n      }\n\n      if (token.isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (token.isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    } // Unravel the next token.\n\n    previous = token\n    token = token.next\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n  token = previous\n  index = childEvents.length\n\n  while (index--) {\n    // Make sure we’ve at least seen something (final eol is part of the last\n    // token).\n    if (childEvents[index][0] === 'enter') {\n      entered = true\n    } else if (\n      // Find a void token that includes a break.\n      entered &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      add(childEvents.slice(index + 1, end))\n      // Help GC.\n      token._tokenizer = token.next = undefined\n      token = token.previous\n      end = index + 1\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = token._tokenizer = token.next = undefined // Do head:\n\n  add(childEvents.slice(0, end))\n  index = -1\n  adjust = 0\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n\n  function add(slice) {\n    var start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    chunkedSplice(events, start, 2, slice)\n  }\n}\n\nmodule.exports = subtokenize\n","\n\nvar assign = require('../constant/assign.js')\n\nfunction shallow(object) {\n  return assign({}, object)\n}\n\nmodule.exports = shallow\n","\n\nObject.defineProperty(exports, '__esModule', {value: true})\n\nvar assign = require('../constant/assign.js')\nvar shallow = require('../util/shallow.js')\n\nvar text = initializeFactory('text')\nvar string = initializeFactory('string')\nvar resolver = {\n  resolveAll: createResolver()\n}\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  function initializeText(effects) {\n    var self = this\n    var constructs = this.parser.constructs[field]\n    var text = effects.attempt(constructs, start, notText)\n    return start\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      } // Data.\n\n      effects.consume(code)\n      return data\n    }\n\n    function atBreak(code) {\n      var list = constructs[code]\n      var index = -1\n\n      if (code === null) {\n        return true\n      }\n\n      if (list) {\n        while (++index < list.length) {\n          if (\n            !list[index].previous ||\n            list[index].previous.call(self, self.previous)\n          ) {\n            return true\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  function resolveAllText(events, context) {\n    var index = -1\n    var enter // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n} // A rather ugly set of instructions which again looks at chunks in the input\n// stream.\n// The reason to do this here is that it is *much* faster to parse in reverse.\n// And that we can’t hook into `null` to split the line suffix before an EOF.\n// To do: figure out if we can make this into a clean utility, or even in core.\n// As it will be useful for GFMs literal autolink extension (and maybe even\n// tables?)\n\nfunction resolveAllLineSuffixes(events, context) {\n  var eventIndex = -1\n  var chunks\n  var data\n  var chunk\n  var index\n  var bufferIndex\n  var size\n  var tabs\n  var token\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      data = events[eventIndex - 1][1]\n      chunks = context.sliceStream(data)\n      index = chunks.length\n      bufferIndex = -1\n      size = 0\n      tabs = undefined\n\n      while (index--) {\n        chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        } // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1);\n        else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      if (size) {\n        token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: shallow(data.end)\n        }\n        data.end = shallow(token.start)\n\n        if (data.start.offset === data.end.offset) {\n          assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n\nexports.resolver = resolver\nexports.string = string\nexports.text = text\n","\n\nvar hasOwnProperty = require('../constant/has-own-property.js')\nvar chunkedSplice = require('./chunked-splice.js')\nvar miniflat = require('./miniflat.js')\n\nfunction combineExtensions(extensions) {\n  var all = {}\n  var index = -1\n\n  while (++index < extensions.length) {\n    extension(all, extensions[index])\n  }\n\n  return all\n}\n\nfunction extension(all, extension) {\n  var hook\n  var left\n  var right\n  var code\n\n  for (hook in extension) {\n    left = hasOwnProperty.call(all, hook) ? all[hook] : (all[hook] = {})\n    right = extension[hook]\n\n    for (code in right) {\n      left[code] = constructs(\n        miniflat(right[code]),\n        hasOwnProperty.call(left, code) ? left[code] : []\n      )\n    }\n  }\n}\n\nfunction constructs(list, existing) {\n  var index = -1\n  var before = []\n\n  while (++index < list.length) {\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  chunkedSplice(existing, 0, 0, before)\n  return existing\n}\n\nmodule.exports = combineExtensions\n","\n\nvar assign = require('../constant/assign.js')\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\nvar chunkedPush = require('./chunked-push.js')\nvar chunkedSplice = require('./chunked-splice.js')\nvar miniflat = require('./miniflat.js')\nvar resolveAll = require('./resolve-all.js')\nvar serializeChunks = require('./serialize-chunks.js')\nvar shallow = require('./shallow.js')\nvar sliceChunks = require('./slice-chunks.js')\n\n// Create a tokenizer.\n// Tokenizers deal with one type of data (e.g., containers, flow, text).\n// The parser is the object dealing with it all.\n// `initialize` works like other constructs, except that only its `tokenize`\n// function is used, in which case it doesn’t receive an `ok` or `nok`.\n// `from` can be given to set the point before the first character, although\n// when further lines are indented, they must be set with `defineSkip`.\nfunction createTokenizer(parser, initialize, from) {\n  var point = from\n    ? shallow(from)\n    : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }\n  var columnStart = {}\n  var resolveAllConstructs = []\n  var chunks = []\n  var stack = []\n\n  var effects = {\n    consume: consume,\n    enter: enter,\n    exit: exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    }),\n    lazy: constructFactory(onsuccessfulcheck, {\n      lazy: true\n    })\n  } // State and tools for resolving and serializing.\n\n  var context = {\n    previous: null,\n    events: [],\n    parser: parser,\n    sliceStream: sliceStream,\n    sliceSerialize: sliceSerialize,\n    now: now,\n    defineSkip: skip,\n    write: write\n  } // The state function.\n\n  var state = initialize.tokenize.call(context, effects) // Track which character we expect to be consumed, to catch bugs.\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  } // Store where we are in the input stream.\n\n  point._index = 0\n  point._bufferIndex = -1\n  return context\n\n  function write(slice) {\n    chunks = chunkedPush(chunks, slice)\n    main() // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n\n    addResult(initialize, 0) // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  } //\n  // Tools.\n  //\n\n  function sliceSerialize(token) {\n    return serializeChunks(sliceStream(token))\n  }\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  function now() {\n    return shallow(point)\n  }\n\n  function skip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  } //\n  // State management.\n  //\n  // Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n  // `consume`).\n  // Here is where we walk through the chunks, which either include strings of\n  // several characters, or numerical character codes.\n  // The reason to do this in a loop instead of a call is so the stack can\n  // drain.\n\n  function main() {\n    var chunkIndex\n    var chunk\n\n    while (point._index < chunks.length) {\n      chunk = chunks[point._index] // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  } // Deal with one code.\n\n  function go(code) {\n    state = state(code)\n  } // Move a character forward.\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    } // Not in a string chunk.\n\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++ // At end of string chunk.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    } // Expose the previous character.\n\n    context.previous = code // Mark as consumed.\n  } // Start a token.\n\n  function enter(type, fields) {\n    var token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  } // Stop a token.\n\n  function exit(type) {\n    var token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  } // Use results.\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  } // Discard results.\n\n  function onsuccessfulcheck(construct, info) {\n    info.restore()\n  } // Factory to attempt/check/interrupt.\n\n  function constructFactory(onreturn, fields) {\n    return hook // Handle either an object mapping codes to constructs, a list of\n    // constructs, or a single construct.\n\n    function hook(constructs, returnState, bogusState) {\n      var listOfConstructs\n      var constructIndex\n      var currentConstruct\n      var info\n      return constructs.tokenize || 'length' in constructs\n        ? handleListOfConstructs(miniflat(constructs))\n        : handleMapOfConstructs\n\n      function handleMapOfConstructs(code) {\n        if (code in constructs || null in constructs) {\n          return handleListOfConstructs(\n            constructs.null\n              ? /* c8 ignore next */\n                miniflat(constructs[code]).concat(miniflat(constructs.null))\n              : constructs[code]\n          )(code)\n        }\n\n        return bogusState(code)\n      }\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        return handleConstruct(list[constructIndex])\n      }\n\n      function handleConstruct(construct) {\n        return start\n\n        function start(code) {\n          // To do: not nede to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.indexOf(construct.name) > -1\n          ) {\n            return nok()\n          }\n\n          return construct.tokenize.call(\n            fields ? assign({}, context, fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      function ok(code) {\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      function nok(code) {\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && resolveAllConstructs.indexOf(construct) < 0) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      chunkedSplice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  function store() {\n    var startPoint = now()\n    var startPrevious = context.previous\n    var startCurrentConstruct = context.currentConstruct\n    var startEventsIndex = context.events.length\n    var startStack = Array.from(stack)\n    return {\n      restore: restore,\n      from: startEventsIndex\n    }\n\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\nmodule.exports = createTokenizer\n","\n\nfunction resolveAll(constructs, events, context) {\n  var called = []\n  var index = -1\n  var resolve\n\n  while (++index < constructs.length) {\n    resolve = constructs[index].resolveAll\n\n    if (resolve && called.indexOf(resolve) < 0) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n\nmodule.exports = resolveAll\n","\n\nvar fromCharCode = require('../constant/from-char-code.js')\n\nfunction serializeChunks(chunks) {\n  var index = -1\n  var result = []\n  var chunk\n  var value\n  var atTab\n\n  while (++index < chunks.length) {\n    chunk = chunks[index]\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else if (chunk === -5) {\n      value = '\\r'\n    } else if (chunk === -4) {\n      value = '\\n'\n    } else if (chunk === -3) {\n      value = '\\r' + '\\n'\n    } else if (chunk === -2) {\n      value = '\\t'\n    } else if (chunk === -1) {\n      if (atTab) continue\n      value = ' '\n    } else {\n      // Currently only replacement character.\n      value = fromCharCode(chunk)\n    }\n\n    atTab = chunk === -2\n    result.push(value)\n  }\n\n  return result.join('')\n}\n\nmodule.exports = serializeChunks\n","\n\nfunction sliceChunks(chunks, token) {\n  var startIndex = token.start._index\n  var startBufferIndex = token.start._bufferIndex\n  var endIndex = token.end._index\n  var endBufferIndex = token.end._bufferIndex\n  var view\n\n  if (startIndex === endIndex) {\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n\nmodule.exports = sliceChunks\n","\n\nObject.defineProperty(exports, '__esModule', {value: true})\n\nvar text$1 = require('./initialize/text.js')\nvar attention = require('./tokenize/attention.js')\nvar autolink = require('./tokenize/autolink.js')\nvar blockQuote = require('./tokenize/block-quote.js')\nvar characterEscape = require('./tokenize/character-escape.js')\nvar characterReference = require('./tokenize/character-reference.js')\nvar codeFenced = require('./tokenize/code-fenced.js')\nvar codeIndented = require('./tokenize/code-indented.js')\nvar codeText = require('./tokenize/code-text.js')\nvar definition = require('./tokenize/definition.js')\nvar hardBreakEscape = require('./tokenize/hard-break-escape.js')\nvar headingAtx = require('./tokenize/heading-atx.js')\nvar htmlFlow = require('./tokenize/html-flow.js')\nvar htmlText = require('./tokenize/html-text.js')\nvar labelEnd = require('./tokenize/label-end.js')\nvar labelStartImage = require('./tokenize/label-start-image.js')\nvar labelStartLink = require('./tokenize/label-start-link.js')\nvar lineEnding = require('./tokenize/line-ending.js')\nvar list = require('./tokenize/list.js')\nvar setextUnderline = require('./tokenize/setext-underline.js')\nvar thematicBreak = require('./tokenize/thematic-break.js')\n\nvar document = {\n  42: list,\n  // Asterisk\n  43: list,\n  // Plus sign\n  45: list,\n  // Dash\n  48: list,\n  // 0\n  49: list,\n  // 1\n  50: list,\n  // 2\n  51: list,\n  // 3\n  52: list,\n  // 4\n  53: list,\n  // 5\n  54: list,\n  // 6\n  55: list,\n  // 7\n  56: list,\n  // 8\n  57: list,\n  // 9\n  62: blockQuote // Greater than\n}\nvar contentInitial = {\n  91: definition // Left square bracket\n}\nvar flowInitial = {\n  '-2': codeIndented,\n  // Horizontal tab\n  '-1': codeIndented,\n  // Virtual space\n  32: codeIndented // Space\n}\nvar flow = {\n  35: headingAtx,\n  // Number sign\n  42: thematicBreak,\n  // Asterisk\n  45: [setextUnderline, thematicBreak],\n  // Dash\n  60: htmlFlow,\n  // Less than\n  61: setextUnderline,\n  // Equals to\n  95: thematicBreak,\n  // Underscore\n  96: codeFenced,\n  // Grave accent\n  126: codeFenced // Tilde\n}\nvar string = {\n  38: characterReference,\n  // Ampersand\n  92: characterEscape // Backslash\n}\nvar text = {\n  '-5': lineEnding,\n  // Carriage return\n  '-4': lineEnding,\n  // Line feed\n  '-3': lineEnding,\n  // Carriage return + line feed\n  33: labelStartImage,\n  // Exclamation mark\n  38: characterReference,\n  // Ampersand\n  42: attention,\n  // Asterisk\n  60: [autolink, htmlText],\n  // Less than\n  91: labelStartLink,\n  // Left square bracket\n  92: [hardBreakEscape, characterEscape],\n  // Backslash\n  93: labelEnd,\n  // Right square bracket\n  95: attention,\n  // Underscore\n  96: codeText // Grave accent\n}\nvar insideSpan = {\n  null: [attention, text$1.resolver]\n}\nvar disable = {\n  null: []\n}\n\nexports.contentInitial = contentInitial\nexports.disable = disable\nexports.document = document\nexports.flow = flow\nexports.flowInitial = flowInitial\nexports.insideSpan = insideSpan\nexports.string = string\nexports.text = text\n","\n\nvar chunkedPush = require('../util/chunked-push.js')\nvar chunkedSplice = require('../util/chunked-splice.js')\nvar classifyCharacter = require('../util/classify-character.js')\nvar movePoint = require('../util/move-point.js')\nvar resolveAll = require('../util/resolve-all.js')\nvar shallow = require('../util/shallow.js')\n\nvar attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\nfunction resolveAllAttention(events, context) {\n  var index = -1\n  var open\n  var group\n  var text\n  var openingSequence\n  var closingSequence\n  var use\n  var nextEvents\n  var offset // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open && // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          } // Number of markers to use from the sequence.\n\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: movePoint(shallow(events[open][1].end), -use),\n            end: shallow(events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: shallow(events[index][1].start),\n            end: movePoint(shallow(events[index][1].start), use)\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: shallow(events[open][1].end),\n            end: shallow(events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: shallow(openingSequence.start),\n            end: shallow(closingSequence.end)\n          }\n          events[open][1].end = shallow(openingSequence.start)\n          events[index][1].start = shallow(closingSequence.end)\n          nextEvents = [] // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = chunkedPush(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          } // Opening.\n\n          nextEvents = chunkedPush(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ]) // Between.\n\n          nextEvents = chunkedPush(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          ) // Closing.\n\n          nextEvents = chunkedPush(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ]) // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = chunkedPush(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          chunkedSplice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n\nfunction tokenizeAttention(effects, ok) {\n  var before = classifyCharacter(this.previous)\n  var marker\n  return start\n\n  function start(code) {\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n\n  function sequence(code) {\n    var token\n    var after\n    var open\n    var close\n\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    token = effects.exit('attentionSequence')\n    after = classifyCharacter(code)\n    open = !after || (after === 2 && before)\n    close = !before || (before === 2 && after)\n    token._open = marker === 42 ? open : open && (before || !close)\n    token._close = marker === 42 ? close : close && (after || !open)\n    return ok(code)\n  }\n}\n\nmodule.exports = attention\n","\n\nvar markdownLineEndingOrSpace = require('../character/markdown-line-ending-or-space.js')\nvar unicodePunctuation = require('../character/unicode-punctuation.js')\nvar unicodeWhitespace = require('../character/unicode-whitespace.js')\n\n// Classify whether a character is unicode whitespace, unicode punctuation, or\n// anything else.\n// Used for attention (emphasis, strong), whose sequences can open or close\n// based on the class of surrounding characters.\nfunction classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n\nmodule.exports = classifyCharacter\n","\n\nfunction markdownLineEndingOrSpace(code) {\n  return code < 0 || code === 32\n}\n\nmodule.exports = markdownLineEndingOrSpace\n","\n\nvar unicodePunctuationRegex = require('../constant/unicode-punctuation-regex.js')\nvar regexCheck = require('../util/regex-check.js')\n\n// In fact adds to the bundle size.\n\nvar unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\nmodule.exports = unicodePunctuation\n","\n\n// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\nvar unicodePunctuation = /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n\nmodule.exports = unicodePunctuation\n","\n\nvar regexCheck = require('../util/regex-check.js')\n\nvar unicodeWhitespace = regexCheck(/\\s/)\n\nmodule.exports = unicodeWhitespace\n","\n\n// chunks (replacement characters, tabs, or line endings).\n\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n  return point\n}\n\nmodule.exports = movePoint\n","\n\nvar asciiAlpha = require('../character/ascii-alpha.js')\nvar asciiAlphanumeric = require('../character/ascii-alphanumeric.js')\nvar asciiAtext = require('../character/ascii-atext.js')\nvar asciiControl = require('../character/ascii-control.js')\n\nvar autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  var size = 1\n  return start\n\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      return end(code)\n    }\n\n    if (code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code)\n      return code === 45 ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n\n  function end(code) {\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.exit('autolink')\n    return ok\n  }\n}\n\nmodule.exports = autolink\n","\n\nvar regexCheck = require('../util/regex-check.js')\n\nvar asciiAlpha = regexCheck(/[A-Za-z]/)\n\nmodule.exports = asciiAlpha\n","\n\nvar regexCheck = require('../util/regex-check.js')\n\nvar asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\nmodule.exports = asciiAtext\n","\n\n// Note: EOF is seen as ASCII control here, because `null < 32 == true`.\nfunction asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code < 32 || code === 127\n  )\n}\n\nmodule.exports = asciiControl\n","\n\nvar markdownSpace = require('../character/markdown-space.js')\nvar factorySpace = require('./factory-space.js')\n\nvar blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit: exit\n}\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  var self = this\n  return start\n\n  function start(code) {\n    if (code === 62) {\n      if (!self.containerState.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        self.containerState.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.indexOf('codeIndented') > -1\n      ? undefined\n      : 4\n  )\n}\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n\nmodule.exports = blockQuote\n","\n\nvar asciiPunctuation = require('../character/ascii-punctuation.js')\n\nvar characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return open\n  }\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n\nmodule.exports = characterEscape\n","\n\nvar regexCheck = require('../util/regex-check.js')\n\nvar asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\nmodule.exports = asciiPunctuation\n","\n\nvar decodeEntity = require('parse-entities/decode-entity.js')\nvar asciiAlphanumeric = require('../character/ascii-alphanumeric.js')\nvar asciiDigit = require('../character/ascii-digit.js')\nvar asciiHexDigit = require('../character/ascii-hex-digit.js')\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {default: e}\n}\n\nvar decodeEntity__default = /*#__PURE__*/ _interopDefaultLegacy(decodeEntity)\n\nvar characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  var self = this\n  var size = 0\n  var max\n  var test\n  return start\n\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  function value(code) {\n    var token\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue')\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeEntity__default['default'](self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n\nmodule.exports = characterReference\n","\n\nvar regexCheck = require('../util/regex-check.js')\n\nvar asciiDigit = regexCheck(/\\d/)\n\nmodule.exports = asciiDigit\n","\n\nvar regexCheck = require('../util/regex-check.js')\n\nvar asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\nmodule.exports = asciiHexDigit\n","\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\nvar markdownLineEndingOrSpace = require('../character/markdown-line-ending-or-space.js')\nvar prefixSize = require('../util/prefix-size.js')\nvar factorySpace = require('./factory-space.js')\n\nvar codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  var self = this\n  var closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  var initialPrefix = prefixSize(this.events, 'linePrefix')\n  var sizeOpen = 0\n  var marker\n  return start\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : content(code)\n  }\n\n  function content(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return effects.attempt(\n        closingFenceConstruct,\n        after,\n        initialPrefix\n          ? factorySpace(effects, content, 'linePrefix', initialPrefix + 1)\n          : content\n      )\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return content(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    var size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.indexOf('codeIndented') > -1\n        ? undefined\n        : 4\n    )\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n\nmodule.exports = codeFenced\n","\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\nvar chunkedSplice = require('../util/chunked-splice.js')\nvar prefixSize = require('../util/prefix-size.js')\nvar factorySpace = require('./factory-space.js')\n\nvar codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented,\n  resolve: resolveCodeIndented\n}\nvar indentedContentConstruct = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n}\n\nfunction resolveCodeIndented(events, context) {\n  var code = {\n    type: 'codeIndented',\n    start: events[0][1].start,\n    end: events[events.length - 1][1].end\n  }\n  chunkedSplice(events, 0, 0, [['enter', code, context]])\n  chunkedSplice(events, events.length, 0, [['exit', code, context]])\n  return events\n}\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  return effects.attempt(indentedContentConstruct, afterPrefix, nok)\n\n  function afterPrefix(code) {\n    if (code === null) {\n      return ok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContentConstruct, afterPrefix, ok)(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return content(code)\n  }\n\n  function content(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n}\n\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  var self = this\n  return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)\n\n  function afterPrefix(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)\n    }\n\n    return prefixSize(self.events, 'linePrefix') < 4 ? nok(code) : ok(code)\n  }\n}\n\nmodule.exports = codeIndented\n","\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\n\nvar codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous: previous\n}\n\nfunction resolveCodeText(events) {\n  var tailExitIndex = events.length - 4\n  var headEnterIndex = 3\n  var index\n  var enter // If we start and end with an EOL or a space.\n\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[tailExitIndex][1].type = events[headEnterIndex][1].type =\n          'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  var sizeOpen = 0\n  var size\n  var token\n  return start\n\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return openingSequence(code)\n  }\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit('codeTextSequence')\n    return gap(code)\n  }\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    } // Closing fence?\n    // Could also be data.\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return closingSequence(code)\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return gap\n    } // Data.\n\n    effects.enter('codeTextData')\n    return data(code)\n  } // In code.\n\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  } // Closing fence.\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    } // Done!\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    } // More or less accents: mark as data.\n\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n\nmodule.exports = codeText\n","\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\nvar markdownLineEndingOrSpace = require('../character/markdown-line-ending-or-space.js')\nvar normalizeIdentifier = require('../util/normalize-identifier.js')\nvar factoryDestination = require('./factory-destination.js')\nvar factoryLabel = require('./factory-label.js')\nvar factorySpace = require('./factory-space.js')\nvar factoryWhitespace = require('./factory-whitespace.js')\nvar factoryTitle = require('./factory-title.js')\n\nvar definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\nvar titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n}\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  var self = this\n  var identifier\n  return start\n\n  function start(code) {\n    effects.enter('definition')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Note: blank lines can’t exist in content.\n\n      return factoryWhitespace(\n        effects,\n        factoryDestination(\n          effects,\n          effects.attempt(\n            titleConstruct,\n            factorySpace(effects, after, 'whitespace'),\n            factorySpace(effects, after, 'whitespace')\n          ),\n          nok,\n          'definitionDestination',\n          'definitionDestinationLiteral',\n          'definitionDestinationLiteralMarker',\n          'definitionDestinationRaw',\n          'definitionDestinationString'\n        )\n      )\n    }\n\n    return nok(code)\n  }\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      if (self.parser.defined.indexOf(identifier) < 0) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, before)(code)\n      : nok(code)\n  }\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factorySpace(effects, after, 'whitespace'),\n        nok,\n        'definitionTitle',\n        'definitionTitleMarker',\n        'definitionTitleString'\n      )(code)\n    }\n\n    return nok(code)\n  }\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n\nmodule.exports = definition\n","\n\nvar asciiControl = require('../character/ascii-control.js')\nvar markdownLineEndingOrSpace = require('../character/markdown-line-ending-or-space.js')\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\n\n// eslint-disable-next-line max-params\nfunction destinationFactory(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  var limit = max || Infinity\n  var balance = 0\n  return start\n\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return destinationEnclosedBefore\n    }\n\n    if (asciiControl(code) || code === 41) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationRaw(code)\n  }\n\n  function destinationEnclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationEnclosed(code)\n  }\n\n  function destinationEnclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return destinationEnclosedBefore(code)\n    }\n\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? destinationEnclosedEscape : destinationEnclosed\n  }\n\n  function destinationEnclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return destinationEnclosed\n    }\n\n    return destinationEnclosed(code)\n  }\n\n  function destinationRaw(code) {\n    if (code === 40) {\n      if (++balance > limit) return nok(code)\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === 41) {\n      if (!balance--) {\n        effects.exit('chunkString')\n        effects.exit(stringType)\n        effects.exit(rawType)\n        effects.exit(type)\n        return ok(code)\n      }\n\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      if (balance) return nok(code)\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (asciiControl(code)) return nok(code)\n    effects.consume(code)\n    return code === 92 ? destinationRawEscape : destinationRaw\n  }\n\n  function destinationRawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    return destinationRaw(code)\n  }\n}\n\nmodule.exports = destinationFactory\n","\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\nvar markdownSpace = require('../character/markdown-space.js')\n\n// eslint-disable-next-line max-params\nfunction labelFactory(effects, ok, nok, type, markerType, stringType) {\n  var self = this\n  var size = 0\n  var data\n  return start\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  function atBreak(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      (code === 93 && !data) ||\n      /* c8 ignore next */\n      (code === 94 &&\n        /* c8 ignore next */\n        !size &&\n        /* c8 ignore next */\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > 999\n    ) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return label(code)\n  }\n\n  function label(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === 92 ? labelEscape : label\n  }\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n\nmodule.exports = labelFactory\n","\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\nvar markdownSpace = require('../character/markdown-space.js')\nvar factorySpace = require('./factory-space.js')\n\nfunction whitespaceFactory(effects, ok) {\n  var seen\n  return start\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n\nmodule.exports = whitespaceFactory\n","\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\nvar factorySpace = require('./factory-space.js')\n\nfunction titleFactory(effects, ok, nok, type, markerType, stringType) {\n  var marker\n  return start\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === 40 ? 41 : code\n    return atFirstTitleBreak\n  }\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === null) {\n      return nok(code)\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return title(code)\n  }\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? titleEscape : title\n  }\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n\nmodule.exports = titleFactory\n","\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\n\nvar hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    return open\n  }\n\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('escapeMarker')\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n\nmodule.exports = hardBreakEscape\n","\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\nvar markdownLineEndingOrSpace = require('../character/markdown-line-ending-or-space.js')\nvar markdownSpace = require('../character/markdown-space.js')\nvar chunkedSplice = require('../util/chunked-splice.js')\nvar factorySpace = require('./factory-space.js')\n\nvar headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\nfunction resolveHeadingAtx(events, context) {\n  var contentEnd = events.length - 2\n  var contentStart = 3\n  var content\n  var text // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  } // Suffix whitespace, part of the closing.\n\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    chunkedSplice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  var self = this\n  var size = 0\n  return start\n\n  function start(code) {\n    effects.enter('atxHeading')\n    effects.enter('atxHeadingSequence')\n    return fenceOpenInside(code)\n  }\n\n  function fenceOpenInside(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n\n  function headingBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequence(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, 'whitespace')(code)\n    }\n\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  function sequence(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit('atxHeadingSequence')\n    return headingBreak(code)\n  }\n\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n\nmodule.exports = headingAtx\n","\n\nvar asciiAlpha = require('../character/ascii-alpha.js')\nvar asciiAlphanumeric = require('../character/ascii-alphanumeric.js')\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\nvar markdownLineEndingOrSpace = require('../character/markdown-line-ending-or-space.js')\nvar markdownSpace = require('../character/markdown-space.js')\nvar fromCharCode = require('../constant/from-char-code.js')\nvar htmlBlockNames = require('../constant/html-block-names.js')\nvar htmlRawNames = require('../constant/html-raw-names.js')\nvar partialBlankLine = require('./partial-blank-line.js')\n\nvar htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\nvar nextBlankConstruct = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n}\n\nfunction resolveToHtmlFlow(events) {\n  var index = events.length\n\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start // Add the prefix start to the HTML line token.\n\n    events[index + 1][1].start = events[index - 2][1].start // Remove the line prefix.\n\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  var self = this\n  var kind\n  var startTag\n  var buffer\n  var index\n  var marker\n  return start\n\n  function start(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationStart\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      kind = 3 // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = fromCharCode(code)\n      startTag = true\n      return tagName\n    }\n\n    return nok(code)\n  }\n\n  function declarationStart(code) {\n    if (code === 45) {\n      effects.consume(code)\n      kind = 2\n      return commentOpenInside\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      kind = 5\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      kind = 4\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length\n        ? self.interrupt\n          ? ok\n          : continuation\n        : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      if (\n        code !== 47 &&\n        startTag &&\n        htmlRawNames.indexOf(buffer.toLowerCase()) > -1\n      ) {\n        kind = 1\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.indexOf(buffer.toLowerCase()) > -1) {\n        kind = 6\n\n        if (code === 47) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      kind = 7 // Do not support complete HTML when interrupting.\n\n      return self.interrupt\n        ? nok(code)\n        : startTag\n        ? completeAttributeNameBefore(code)\n        : completeClosingTagAfter(code)\n    }\n\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n\n  function completeAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    marker = undefined\n    return completeAttributeValueUnquoted(code)\n  }\n\n  function completeAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return completeAttributeValueQuotedAfter\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return code === null || markdownLineEnding(code)\n      ? continuation(code)\n      : nok(code)\n  }\n\n  function continuation(code) {\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === 60 && kind === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === 62 && kind === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === 63 && kind === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === 93 && kind === 5) {\n      effects.consume(code)\n      return continuationCharacterDataInside\n    }\n\n    if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {\n      return effects.check(\n        nextBlankConstruct,\n        continuationClose,\n        continuationAtLineEnding\n      )(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n\n  function continuationAtLineEnding(code) {\n    effects.exit('htmlFlowData')\n    return htmlContinueStart(code)\n  }\n\n  function htmlContinueStart(code) {\n    if (code === null) {\n      return done(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return htmlContinueStart\n    }\n\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n\n  function continuationRawEndTag(code) {\n    if (code === 62 && htmlRawNames.indexOf(buffer.toLowerCase()) > -1) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      buffer += fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n\n  function continuationCharacterDataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    return continuation(code)\n  }\n\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return done(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n\n  function done(code) {\n    effects.exit('htmlFlow')\n    return ok(code)\n  }\n}\n\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n\n  function start(code) {\n    effects.exit('htmlFlowData')\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    return effects.attempt(partialBlankLine, ok, nok)\n  }\n}\n\nmodule.exports = htmlFlow\n","\n\n// This module is copied from <https://spec.commonmark.org/0.29/#html-blocks>.\nvar basics = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'source',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\nmodule.exports = basics\n","\n\n// This module is copied from <https://spec.commonmark.org/0.29/#html-blocks>.\nvar raws = ['pre', 'script', 'style', 'textarea']\n\nmodule.exports = raws\n","\n\nvar asciiAlpha = require('../character/ascii-alpha.js')\nvar asciiAlphanumeric = require('../character/ascii-alphanumeric.js')\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\nvar markdownLineEndingOrSpace = require('../character/markdown-line-ending-or-space.js')\nvar markdownSpace = require('../character/markdown-space.js')\nvar factorySpace = require('./factory-space.js')\n\nvar htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  var self = this\n  var marker\n  var buffer\n  var index\n  var returnState\n  return start\n\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n\n  function commentOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n\n  function commentStart(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n\n  function commentStartDash(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n\n  function tagOpenAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  } // We can’t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  function atLineEnding(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(\n      effects,\n      afterPrefix,\n      'linePrefix',\n      self.parser.constructs.disable.null.indexOf('codeIndented') > -1\n        ? undefined\n        : 4\n    )\n  }\n\n  function afterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n\nmodule.exports = htmlText\n","\n\nvar markdownLineEndingOrSpace = require('../character/markdown-line-ending-or-space.js')\nvar chunkedPush = require('../util/chunked-push.js')\nvar chunkedSplice = require('../util/chunked-splice.js')\nvar normalizeIdentifier = require('../util/normalize-identifier.js')\nvar resolveAll = require('../util/resolve-all.js')\nvar shallow = require('../util/shallow.js')\nvar factoryDestination = require('./factory-destination.js')\nvar factoryLabel = require('./factory-label.js')\nvar factoryTitle = require('./factory-title.js')\nvar factoryWhitespace = require('./factory-whitespace.js')\n\nvar labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\nvar resourceConstruct = {\n  tokenize: tokenizeResource\n}\nvar fullReferenceConstruct = {\n  tokenize: tokenizeFullReference\n}\nvar collapsedReferenceConstruct = {\n  tokenize: tokenizeCollapsedReference\n}\n\nfunction resolveAllLabelEnd(events) {\n  var index = -1\n  var token\n\n  while (++index < events.length) {\n    token = events[index][1]\n\n    if (\n      !token._used &&\n      (token.type === 'labelImage' ||\n        token.type === 'labelLink' ||\n        token.type === 'labelEnd')\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n\n  return events\n}\n\nfunction resolveToLabelEnd(events, context) {\n  var index = events.length\n  var offset = 0\n  var group\n  var label\n  var text\n  var token\n  var open\n  var close\n  var media // Find an opening.\n\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      } // Mark other link openings as inactive, as we can’t have links in\n      // links.\n\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n\n  group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: shallow(events[open][1].start),\n    end: shallow(events[events.length - 1][1].end)\n  }\n  label = {\n    type: 'label',\n    start: shallow(events[open][1].start),\n    end: shallow(events[close][1].end)\n  }\n  text = {\n    type: 'labelText',\n    start: shallow(events[open + offset + 2][1].end),\n    end: shallow(events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ] // Opening marker.\n\n  media = chunkedPush(media, events.slice(open + 1, open + offset + 3)) // Text open.\n\n  media = chunkedPush(media, [['enter', text, context]]) // Between.\n\n  media = chunkedPush(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  ) // Text close, marker close, label close.\n\n  media = chunkedPush(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ]) // Reference, resource, or so.\n\n  media = chunkedPush(media, events.slice(close + 1)) // Media close.\n\n  media = chunkedPush(media, [['exit', group, context]])\n  chunkedSplice(events, open, events.length, media)\n  return events\n}\n\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  var self = this\n  var index = self.events.length\n  var labelStart\n  var defined // Find an opening.\n\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n\n  function start(code) {\n    if (!labelStart) {\n      return nok(code)\n    } // It’s a balanced bracket, but contains a link.\n\n    if (labelStart._inactive) return balanced(code)\n    defined =\n      self.parser.defined.indexOf(\n        normalizeIdentifier(\n          self.sliceSerialize({\n            start: labelStart.end,\n            end: self.now()\n          })\n        )\n      ) > -1\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return afterLabelEnd\n  }\n\n  function afterLabelEnd(code) {\n    // Resource: `[asd](fgh)`.\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        ok,\n        defined ? ok : balanced\n      )(code)\n    } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?\n\n    if (code === 91) {\n      return effects.attempt(\n        fullReferenceConstruct,\n        ok,\n        defined\n          ? effects.attempt(collapsedReferenceConstruct, ok, balanced)\n          : balanced\n      )(code)\n    } // Shortcut reference: `[asd]`?\n\n    return defined ? ok(code) : balanced(code)\n  }\n\n  function balanced(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\nfunction tokenizeResource(effects, ok, nok) {\n  return start\n\n  function start(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return factoryWhitespace(effects, open)\n  }\n\n  function open(code) {\n    if (code === 41) {\n      return end(code)\n    }\n\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      nok,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      3\n    )(code)\n  }\n\n  function destinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, between)(code)\n      : end(code)\n  }\n\n  function between(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factoryWhitespace(effects, end),\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n\n    return end(code)\n  }\n\n  function end(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n\nfunction tokenizeFullReference(effects, ok, nok) {\n  var self = this\n  return start\n\n  function start(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      afterLabel,\n      nok,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  function afterLabel(code) {\n    return self.parser.defined.indexOf(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    ) < 0\n      ? nok(code)\n      : ok(code)\n  }\n}\n\nfunction tokenizeCollapsedReference(effects, ok, nok) {\n  return start\n\n  function start(code) {\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return open\n  }\n\n  function open(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n\nmodule.exports = labelEnd\n","\n\nvar labelEnd = require('./label-end.js')\n\nvar labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  var self = this\n  return start\n\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n\n    return nok(code)\n  }\n\n  function after(code) {\n    /* c8 ignore next */\n    return code === 94 &&\n      /* c8 ignore next */\n      '_hiddenFootnoteSupport' in self.parser.constructs\n      ? /* c8 ignore next */\n        nok(code)\n      : ok(code)\n  }\n}\n\nmodule.exports = labelStartImage\n","\n\nvar labelEnd = require('./label-end.js')\n\nvar labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  var self = this\n  return start\n\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  function after(code) {\n    /* c8 ignore next */\n    return code === 94 &&\n      /* c8 ignore next */\n      '_hiddenFootnoteSupport' in self.parser.constructs\n      ? /* c8 ignore next */\n        nok(code)\n      : ok(code)\n  }\n}\n\nmodule.exports = labelStartLink\n","\n\nvar factorySpace = require('./factory-space.js')\n\nvar lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n\nmodule.exports = lineEnding\n","\n\nvar asciiDigit = require('../character/ascii-digit.js')\nvar markdownSpace = require('../character/markdown-space.js')\nvar prefixSize = require('../util/prefix-size.js')\nvar sizeChunks = require('../util/size-chunks.js')\nvar factorySpace = require('./factory-space.js')\nvar partialBlankLine = require('./partial-blank-line.js')\nvar thematicBreak = require('./thematic-break.js')\n\nvar list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\nvar listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\nvar indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\nfunction tokenizeListStart(effects, ok, nok) {\n  var self = this\n  var initialSize = prefixSize(self.events, 'linePrefix')\n  var size = 0\n  return start\n\n  function start(code) {\n    var kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      partialBlankLine, // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize + sizeChunks(self.sliceStream(effects.exit('listItemPrefix')))\n    return ok(code)\n  }\n}\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  var self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(partialBlankLine, onBlank, notBlank)\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine // We have a blank line.\n    // Still, try to consume at most the items size.\n\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.indexOf('codeIndented') > -1\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\nfunction tokenizeIndent(effects, ok, nok) {\n  var self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  function afterPrefix(code) {\n    return prefixSize(self.events, 'listItemIndent') ===\n      self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  var self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.indexOf('codeIndented') > -1\n      ? undefined\n      : 4 + 1\n  )\n\n  function afterPrefix(code) {\n    return markdownSpace(code) ||\n      !prefixSize(self.events, 'listItemPrefixWhitespace')\n      ? nok(code)\n      : ok(code)\n  }\n}\n\nmodule.exports = list\n","\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\nvar markdownSpace = require('../character/markdown-space.js')\nvar factorySpace = require('./factory-space.js')\n\nvar thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  var size = 0\n  var marker\n  return start\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n\nmodule.exports = thematicBreak\n","\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\nvar shallow = require('../util/shallow.js')\nvar factorySpace = require('./factory-space.js')\n\nvar setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\nfunction resolveToSetextUnderline(events, context) {\n  var index = events.length\n  var content\n  var text\n  var definition\n  var heading // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n\n  heading = {\n    type: 'setextHeading',\n    start: shallow(events[text][1].start),\n    end: shallow(events[events.length - 1][1].end)\n  } // Change the paragraph to setext heading text.\n\n  events[text][1].type = 'setextHeadingText' // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = shallow(events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  } // Add the heading exit at the end.\n\n  events.push(['exit', heading, context])\n  return events\n}\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  var self = this\n  var index = self.events.length\n  var marker\n  var paragraph // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== 'lineEnding' &&\n      self.events[index][1].type !== 'linePrefix' &&\n      self.events[index][1].type !== 'content'\n    ) {\n      paragraph = self.events[index][1].type === 'paragraph'\n      break\n    }\n  }\n\n  return start\n\n  function start(code) {\n    if (!self.lazy && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      effects.enter('setextHeadingLineSequence')\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit('setextHeadingLineSequence')\n    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)\n  }\n\n  function closingSequenceEnd(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n\nmodule.exports = setextUnderline\n","\n\nvar subtokenize = require('./util/subtokenize.js')\n\nfunction postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n\n  return events\n}\n\nmodule.exports = postprocess\n","\n\nvar search = /[\\0\\t\\n\\r]/g\n\nfunction preprocess() {\n  var start = true\n  var column = 1\n  var buffer = ''\n  var atCarriageReturn\n  return preprocessor\n\n  function preprocessor(value, encoding, end) {\n    var chunks = []\n    var match\n    var next\n    var startPosition\n    var endPosition\n    var code\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition = match ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        if (code === 0) {\n          chunks.push(65533)\n          column++\n        } else if (code === 9) {\n          next = Math.ceil(column / 4) * 4\n          chunks.push(-2)\n\n          while (column++ < next) chunks.push(-1)\n        } else if (code === 10) {\n          chunks.push(-4)\n          column = 1\n        } // Must be carriage return.\n        else {\n          atCarriageReturn = true\n          column = 1\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n\n    return chunks\n  }\n}\n\nmodule.exports = preprocess\n"]}