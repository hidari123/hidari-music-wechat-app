{"version":3,"sources":["index.js","html.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["module.exports = require('./html')\n","exports.exit = {\n  htmlFlowData: exitHtmlFlowData,\n  htmlTextData: exitHtmlTextData\n}\n\n// An opening or closing tag, followed by a case-insensitive specific tag name,\n// followed by HTML whitespace, a greater than, or a slash.\nvar reFlow = /<(\\/?)(iframe|noembed|noframes|plaintext|script|style|title|textarea|xmp)(?=[\\t\\n\\f\\r />])/gi\n// As HTML (text) parses tags separately (and v. strictly), we donâ€™t need to be\n// global.\nvar reText = new RegExp('^' + reFlow.source, 'i')\n\nfunction exitHtmlFlowData(token) {\n  exitHtmlData.call(this, token, reFlow)\n}\n\nfunction exitHtmlTextData(token) {\n  exitHtmlData.call(this, token, reText)\n}\n\nfunction exitHtmlData(token, filter) {\n  var value = this.sliceSerialize(token)\n\n  if (this.options.allowDangerousHtml) {\n    value = value.replace(filter, '&lt;$1$2')\n  }\n\n  this.raw(this.encode(value))\n}\n"]}